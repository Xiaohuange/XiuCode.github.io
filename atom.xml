<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[语亮]]></title>
  <subtitle><![CDATA[他一直致力于成为一个颇有人文情怀的科技从业者]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="www.xiuyuliang.com/"/>
  <updated>2014-12-08T13:11:38.017Z</updated>
  <id>www.xiuyuliang.com/</id>
  
  <author>
    <name><![CDATA[修宇亮]]></name>
    <email><![CDATA[yuliangxiu@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CSS学习笔记]]></title>
    <link href="www.xiuyuliang.com/2014/12/08/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>www.xiuyuliang.com/2014/12/08/css学习笔记/</id>
    <published>2014-12-07T18:21:26.000Z</published>
    <updated>2014-12-08T04:10:54.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://techcabal.com/wp-content/uploads/2014/10/css3.jpg" alt="CSS"></p>
<blockquote>
<p>简介</p>
</blockquote>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://techcabal.com/wp-content/uploads/2014/10/css3.jpg" alt="CSS"></p>
<blockquote>
<p>简介</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="CSS" scheme="www.xiuyuliang.com/tags/CSS/"/>
    
      <category term="WEB" scheme="www.xiuyuliang.com/tags/WEB/"/>
    
      <category term="web前端" scheme="www.xiuyuliang.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发易错点汇总]]></title>
    <link href="www.xiuyuliang.com/2014/12/08/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>www.xiuyuliang.com/2014/12/08/html学习笔记/</id>
    <published>2014-12-07T17:21:26.000Z</published>
    <updated>2014-12-08T13:10:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.frontdojo.com/content/images/2014/May/html5-css-javascript.png" alt="前端开发"></p>
<blockquote>
<p>HTML负责搭建网站框架,CSS负责修饰html元素的样式，Javascript负责将html元素关联方法和响应事件，jQuery是用javascript写的一个拥有众多优秀交互方法接口的包。</p>
</blockquote>
<a id="more"></a>

<h4 id="html需要注意的细节：">HTML需要注意的细节：</h4><ol>
<li>使用空的段落标记<code>&lt;p&gt;&lt;/p&gt;</code>去插入一个空行是个坏习惯。用 <code>&lt;br /&gt;</code> 标签代替它，除此之外它还有换行的作用，<code>&lt;p&gt;This is&lt;br /&gt;a para&lt;br /&gt;graph with line breaks&lt;/p&gt;</code>。</li>
<li><code>&lt;hr /&gt;</code> 标签在 HTML 页面中创建水平线，用于分割内容。</li>
<li>空元素要及时关闭，在开始标签中添加斜杠，比如 <code>&lt;br /&gt;</code>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</li>
<li>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：
<code>name=&#39;Bill &quot;HelloWorld&quot; Gates&#39;</code></li>
<li>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</li>
<li>请确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题。搜索引擎使用标题为您的网页的结构和内容编制索引。</li>
<li>class 用于元素组（类似的元素，或者可以理解为某一类元素），而 id 用于标识单独的唯一的元素。</li>
<li>下面的这行会在新窗口打开文档,target的作用：
<code>&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot;&gt;Visit W3School!&lt;/a&gt;</code></li>
<li><code>&lt;img src=&quot;boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</code>在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。</li>
<li>HTML <code>&lt;div&gt;</code>元素是块级元素，它是可用于组合其他 HTML 元素的容器。</li>
<li>HTML <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://www.frontdojo.com/content/images/2014/May/html5-css-javascript.png" alt="前端开发"></p>
<blockquote>
<p>HTML负责搭建网站框架,CSS负责修饰html元素的样式，Javascript负责将html元素关联方法和响应事件，jQuery是用javascript写的一个拥有众多优秀交互方法接口的包。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="HTML" scheme="www.xiuyuliang.com/tags/HTML/"/>
    
      <category term="CSS" scheme="www.xiuyuliang.com/tags/CSS/"/>
    
      <category term="web前端" scheme="www.xiuyuliang.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Javascript" scheme="www.xiuyuliang.com/tags/Javascript/"/>
    
      <category term="jQuery" scheme="www.xiuyuliang.com/tags/jQuery/"/>
    
      <category term="错题本" scheme="www.xiuyuliang.com/categories/%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <link href="www.xiuyuliang.com/2014/12/05/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>www.xiuyuliang.com/2014/12/05/Git学习笔记/</id>
    <published>2014-12-04T17:21:26.000Z</published>
    <updated>2014-12-08T06:03:40.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://xiublog.qiniudn.com/github&amp;git.jpg" alt="github&amp;git"></p>
<h3 id="git-与-github对接:">Git 与 Github对接:</h3><blockquote>
<ol>
<li><code>cd</code> 到当前文档</li>
<li><code>git init</code>初始化git</li>
<li><code>git add -A</code> 将所有文件提交到暂存区</li>
<li><code>git commit -m &quot;xxx&quot;</code>将所有暂存区文件提交仓库</li>
<li><code>git remote add origin git@github.com:xiucode/font-end-beginner.git</code>对接远程库</li>
<li><code>git clone git@github.com:xiuocde/gitskills.git</code>直接把远程仓库克隆到本地</li>
<li><code>git fetch origin</code>从远程库拉取内容到本地，不合并</li>
<li><code>git pull</code>从远程库拉取内容到本地，并且合并 </li>
<li><code>git push origin master</code>将本地仓库推送到远程仓库</li>
<li><code>git pull</code>根据远程仓库更新本地仓库</li>
</ol>
</blockquote>
<a id="more"></a>

<h3 id="基本概念">基本概念</h3><p>对于任何一个文件,在 Git 内都只有三种状态:已提交 (committed),已修改(modified)和已暂存(staged)。</p>
<p><strong>已提交</strong>表示该文件已经被安全地保存在本地数据库中了;</p>
<p><strong>已修改</strong>表示修改了某个文件,但还没有提交保存;</p>
<p><strong>已暂存</strong>表示把已修改的文件放在下次提交时要保存的清单中。</p>
<p>由此我们看到 Git 管理项目时,文件流转的三个工作区域:Git 的本地数据目录,工作目录以及暂存区域。</p>
<hr>
<p>请记住,工作目录下面的所有文件都不外乎这两种状态:已跟踪或未跟踪。</p>
<p>已跟踪的文件是指本来就被纳入版本控制管理的文件,在上次快照中有它们的记录,工作一段时间后,它们的状态可能是未更新,已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照,也不在当前的暂存区域。</p>
<p>初次克隆某个仓库时,工作目录中的所有文件都属于已跟踪文件,且状态为未修改。在编辑过某些文件之后,Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域,然后等 最后一次性提交暂存区域的所有文件更新,如此重复。</p>
<h3 id="基本的-git-工作流程如下所示:">基本的 Git 工作流程如下所示:</h3><ol>
<li>在工作目录中修改某些文件。</li>
<li>对这些修改了的文件作快照,并保存到暂存区域。</li>
<li>提交更新,将保存在暂存区域的文件快照转储到 git 目录中。</li>
</ol>
<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-12-06 00.47.09.png" alt="image"></p>
<blockquote>
<h1 id="<strong>add负责将单个文件一次加入暂存区，commit负责将暂存区的文件“一股脑”全都存进仓库之中。</strong>"><strong>add负责将单个文件一次加入暂存区，commit负责将暂存区的文件“一股脑”全都存进仓库之中。</strong></h1></blockquote>
<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-12-05 18.00.15.png" alt="git流程"></p>
<h3 id="初次运行-git-前的配置">初次运行 Git 前的配置</h3><p>Git 提供了一个叫做 git config 的工具(译注:实际是 git-config 命令,只不过可以通过 git 加一个 名字来呼叫此命令。),专门用来配置或读取相应的工作环境变量。而正是由这些环境变量,决定了 Git 在 各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方:</p>
<ul>
<li>/etc/gitconfig文件:系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项,读写 的就是这个文件。</li>
<li>~/.gitconfig文件:用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项,读写 的就是这个文件。</li>
<li>当前项目的 git 目录中的配置文件(也就是工作目录中的 .git/config 文件):这里的配置仅仅针对当前 项目有效。每一个级别的配置都会覆盖上层的相同配置,所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//配置姓名、邮箱和编辑器</span></div><div class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"Xiu Yuliang"</span></div><div class="line">$ git config --<span class="keyword">global</span> user.email yuliangxiu<span class="variable">@gmail</span>.com</div><div class="line">$ ￼git config --<span class="keyword">global</span> core.<span class="keyword">editor</span> sublime</div><div class="line"></div><div class="line"><span class="comment">//解决合并冲突时使用哪种差异分析工具</span></div><div class="line"><span class="comment">//Git 可以理解 kdiff3,tkdiff,meld,xxdiff,emerge,vimdiff,gvimdiff,ecmerge,和opendiff等合并工具的输出信息</span></div><div class="line">$ git config --<span class="keyword">global</span> merge.tool vimdiff</div><div class="line"></div><div class="line"><span class="comment">//查看已有的配置信息</span></div><div class="line">$ git config --list </div><div class="line"></div><div class="line"><span class="comment">//寻求帮助</span></div><div class="line">$ git <span class="keyword">help</span> &lt;verb&gt;</div></pre></td></tr></table></figure>

<p>如果用了 --global 选项,那么更改的配置文件就是位于你用户主目录下的那个,以后你所有的项目都会默 认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮,只要去掉 --global 选项重 新配置即可,新的设定保存在当前项目的 .git/config 文件里。</p>
<h3 id="具体-git-操作">具体 Git 操作</h3><h4 id="建立版本库的基础操作">建立版本库的基础操作</h4><p><code>$ git init</code>：要对现有的某个项目开始用 Git 管理,只需到此项目所在的目录</p>
<p><code>$ git add *.c</code>：开始跟踪新文件,或者把已跟踪的文件放到暂存区,还能用于合并时 把有冲突的文件标记为已解决状态等</p>
<p><code>￼$ git clone git://github.com/schacon/grit.git mygrit</code>克隆仓库，并命名为mygrit</p>
<p>￼<code>$ git status</code>：查看文件状态</p>
<p><code>git cat readme.txt</code>抓取当前的文件，打开查看内容</p>
<p><code>$ cat .gitignore</code>：忽略某些文件</p>
<h5 id="<em>文件-.gitignore-的格式规范如下</em>:"><em>文件 .gitignore 的格式规范如下</em>:</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">• 所有空行或者以注释符号 <span class="comment"># 开头的行都会被 Git 忽略。</span></div><div class="line">• 可以使用标准的 glob 模式匹配。</div><div class="line">• 匹配模式最后跟􏰄斜杠(/)说明要忽略的是目录。</div><div class="line">• 要忽略指定模式以外的文件或目录,可以在模式前加上惊叹号(!)取􏰄。</div><div class="line">所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号(<span class="keyword">*</span>)匹配零个或多个任意字符;[abc] 匹配 任何一个列在方括号中的字符(这个例子要么匹配一个 a,要么匹配一个 b,要么匹配一个 c);问号(?) 只匹配一个任意字符;如果在方括号中使用短划线分隔两个字符,表示所有在这两个字符范围内的都可以匹配 (比如 [0-9] 表示匹配所有 0 到 9 的数字)。</div><div class="line">我们再看一个 .gitignore 文件的例子:</div><div class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></div><div class="line"><span class="keyword">*</span>.a <span class="comment"># 忽略所有 .a 结尾的文件</span></div><div class="line">!lib.a <span class="comment"># 但 lib.a 除外</span></div><div class="line">/TODO <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件</span></div><div class="line">doc/<span class="keyword">*</span>.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></div></pre></td></tr></table></figure>

<h4 id="查看版本差异">查看版本差异</h4><p><code>git diff</code>: 比较的是工作目录中当前文件和暂存区域快照之间的差异</p>
<p><code>git diff --cached</code>: 已经暂存起来的文件和上次提交时的快照之间的差异</p>
<p><code>git diff HEAD -- readme.txt</code>: 工作目录中文件与仓库中文件的比对</p>
<h4 id="commit提交">commit提交</h4><p><code>￼$ git commit</code>:提交命令</p>
<p><code>$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</code>也可以使用 -m 参数后跟提交说明的方式</p>
<p><code>git commit -a -m &#39;added new benchmarks&#39;</code>给 git commit 加上 -a 选项,Git 就会自动把所有已经跟踪过的文件暂 存起来一并提交,从而跳过 git add</p>
<p><code>git reset --hard HEAD^</code>回溯到上一个版本，上上个版本用HEAD^^</p>
<p><code>git reset --hard id</code>回溯到id号指示的那一个版本</p>
<p><code>git reflog</code>展示你对仓库的所有操作轨迹，这样即使你删除了某一个版本（git log无法显示此删除版本的id号码），也可以荣国reflog重新找到你的那次操作，从而查到id号码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">samusakaisuketekiMacBook-Pro:learngit Personals$ git reflog</div><div class="line">869f440 HEAD@{0}: <span class="operator"><span class="keyword">reset</span>: moving <span class="keyword">to</span> <span class="number">869</span>f44020</span></div><div class="line"><span class="number">1818601</span> HEAD@{<span class="number">1</span>}: <span class="keyword">reset</span>: moving <span class="keyword">to</span> HEAD^</div><div class="line"><span class="number">869</span>f440 HEAD@{<span class="number">2</span>}: <span class="keyword">commit</span>: git <span class="keyword">commit</span> -m <span class="string">"append the GPL"</span></div><div class="line"><span class="number">1818601</span> HEAD@{<span class="number">3</span>}: <span class="keyword">commit</span>: <span class="keyword">second</span> <span class="keyword">commit</span></div><div class="line">a8e553a HEAD@{<span class="number">4</span>}: <span class="keyword">commit</span> (initial): wrote a readme file</div></pre></td></tr></table></figure>

<h4 id="移除和重命名">移除和重命名</h4><p><code>rm test</code>:简单的移除工作文件操作</p>
<p><code>git rm test</code> <code>git commit -m &quot;remove the test&quot;</code>:移除该文件的版本库中的文件</p>
<p><code>git checkout -- test</code>如果只是删除了工作区中的文件，可以从版本库中还原删除的文件</p>
<p><code>git rm -f test</code>:当文件已经存在于暂存区的时候，删除工作文件</p>
<p><code>git rm --cached test</code>:当文件已经存在于暂存区的时候，删除暂存文件</p>
<p><code>git mv README.txt README</code>：文件重命名，并同时自动设定跟踪新文件</p>
<p><code>git checkout -- benchmarks.rb</code>取消文件修改(工作区的文件)，回退到上一次add或者commit之后的状态，用版本库/暂存区里面的版本替换工作区的版本，如果文件在暂存区和版本库都有，则用暂存区的版本来替换掉</p>
<p><code>git reset HEAD readme.txt</code>取消文件修改（提交到暂存区文件），将文件放回工作区，HEAD表示最新版本</p>
<h4 id="查看操作历史">查看操作历史</h4><p><code>git log -p -2 --stat</code>查看操作历史,我们常用 -p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新,--stat仅仅显示简要的增改行数变化</p>
<p><code>git log --pretty=oneline</code>单行显示</p>
<p><code>$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</code>定制要显示的记录格式,这样的输出便于后期编程提取分析</p>
<p><code>$ git log --pretty=&quot;%h:%s&quot; --author=gitster --since=&quot;2008-10-01&quot; \ --before=&quot;2008-11-01&quot; --no-merges -- t/</code>加上时间段和确定作者的输出</p>
<p><code>￼$ git commit --amend</code>重新提交（比如刚才提交后发现修改有错误或者忘记add一些文件）</p>
<p><code>gitk</code>图形界面</p>
<p><code>git lg</code>自己编辑的五彩斑斓log</p>
<h4 id="远程push和pull">远程push和pull</h4><p><code>$ git remote -v</code>查看远程库(包含远程库的地址)，显示抓取和推送的origin地址</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">osamusakaisuketekiMacBook-<span class="constant">Pro</span><span class="symbol">:learngit</span> <span class="constant">Personals</span><span class="variable">$ </span>git remote -v</div><div class="line">origin	git<span class="variable">@github</span>.<span class="symbol">com:</span>xiucode/learngit.git (fetch)</div><div class="line">origin	git<span class="variable">@github</span>.<span class="symbol">com:</span>xiucode/learngit.git (push)</div></pre></td></tr></table></figure>

<p><code>$ git remote add pb git://github.com/paulboone/ticgit.git</code>要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用</p>
<p><code>$ git fetch pd</code>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据,fetch 命令只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,只有当你确实准备好 了,才能手工合并</p>
<p><code>git pull</code>从原始克隆的远 端仓库中抓取数据后,合并到工作目录中当前分支</p>
<p><code>￼$ git push origin master</code>将本地仓库中的数据推送到远程仓库,如果
在你推数据前,已经有其他人推送了若干更新,那你的推送操作就会被驳回。你必须先把他们的更新抓取到本
地,并到自己的项目中,然后才可以再次推送。</p>
<p><code>￼$ git push origin dev</code>推送其他的分支</p>
<p><code>git checkout -b dev origin/dev</code>创建本地分支并且对接云端已有的dev分支，方便push</p>
<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-12-06 13.01.07.png" alt="团队协作push和pull的步骤"></p>
<p>不同的推送需求</p>
<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-12-06 12.32.18.png" alt="推送需求"></p>
<p><code>$ git remote show origin</code>查案远程仓库详细信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div><div class="line">$ git remote <span class="built_in">add</span> pb gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/paulboone/ticgit.git $ git remote -<span class="keyword">v</span></div><div class="line">origin gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/schacon/ticgit.git</div><div class="line">pb gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/paulboone/ticgit.git</div></pre></td></tr></table></figure>

<p>实际情况比较复杂：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="operator"><span class="keyword">show</span> origin * remote origin</span></div><div class="line">URL: git@github.com:defunkt/github.git</div><div class="line">Remote branch merged <span class="keyword">with</span> <span class="string">'git pull'</span> while <span class="keyword">on</span> branch issues</div><div class="line">issues</div><div class="line">Remote branch merged <span class="keyword">with</span> <span class="string">'git pull'</span> while <span class="keyword">on</span> branch <span class="keyword">master</span></div><div class="line"><span class="keyword">master</span></div><div class="line">New remote branches (<span class="keyword">next</span> <span class="keyword">fetch</span> will store <span class="keyword">in</span> remotes/origin)</div><div class="line">caching</div><div class="line">Stale tracking branches (<span class="keyword">use</span> <span class="string">'git remote prune'</span>)</div><div class="line">libwalker</div><div class="line">walker2</div><div class="line">Tracked remote branches</div><div class="line">acl</div><div class="line">apiv2 dashboard2 issues <span class="keyword">master</span> postgres</div><div class="line"><span class="keyword">Local</span> branch pushed <span class="keyword">with</span> <span class="string">'git push'</span> <span class="keyword">master</span>:<span class="keyword">master</span></div></pre></td></tr></table></figure>

<p>运行 git push 时缺省推送的分支是什么(译注:最后两行)。</p>
<p>它还显示了有哪些远端分支还 没有同步到本地(译注:第六行的 caching 分支),哪些已同步到本地的远端分支在远端服务器上已被删除(译注:Stale tracking branches 下面的两个分支)</p>
<p>以及运行 git pull 时将自动合并哪些分支(译注:前四行中列出的 issues 和 master 分支)。</p>
<p><code>$ git remote rename pb paul</code>远程仓库的重命名</p>
<p><code>$ git remote rm paul</code>移除远端的某一个仓库</p>
<h4 id="github使用">Github使用</h4><ol>
<li><code>cd 当前git目录</code>首先定位到当前的目录</li>
<li>在Github上创建相应的respositoriies <code>learngit</code></li>
<li><code>git remote add origin git@github.com:xiucode/learngit.git</code></li>
<li><code>git push -u origin master</code>-u的意思是不近将本地的master推送到远程github上的master，并且进行分支的合并关联</li>
<li><code>git push origin master</code>之后，只要本地提交到仓库，直接用这段命令就可以实现同步</li>
<li><code>git clone git@github.com:xiuocde/gitskills.git</code>直接把远程仓库克隆到本地</li>
<li>github上可以fork他人的仓库，fork后他人的仓库就放到了自己云端，然后git clone自己的仓库到本地，进行修改后commit，然后push，如果你想汇入他人的仓库，可以抛出一个pull request，如果对方很喜欢你添加的功能，就有可能接受，如果接受你的代码就会merge到源代码</li>
</ol>
<p>Git 与 Github对接：</p>
<ol>
<li>cd 到当前文档</li>
<li>git init 初始化git</li>
<li>git add -A 将所有文件提交到暂存区</li>
<li>git commit -m &quot;xxx&quot;将所有暂存区文件提交仓库</li>
<li>git remote add origin git@github.com:xiucode/font-end-beginner.git对接远程库</li>
<li>git fetch origin从远程库拉取内容到本地，不合并</li>
<li>git pull从远程库拉取内容到本地，并且合并 </li>
<li>git push origin master将本地仓库推送到远程仓库</li>
<li>git pull根据远程仓库更新本地仓库</li>
</ol>
<h4 id="标签">标签</h4><p><code>$ git tag</code>列出现有的标签</p>
<p><code>$ git tag -l &#39;v1.4.2.*&#39;</code>列出v.1.4.2的系列版本</p>
<p><code>$ git tag v1.4</code>给对象加一个轻量级标签（无说明文字）</p>
<p><code>$ git tag -a v1.4 -m &#39;my version 1.4&#39;</code>给对象加一个重量级标签（带说明文字）</p>
<p><code>$ git tag v1.4 fa89asf9</code>给非当前commit的旧分支打标签只需要制定他的id</p>
<p><code>$ git tag -d v1.4</code>删除某一个标签</p>
<p><code>$ git show v1.4</code>查看该标签对应对象的版本信息（和直接show + name用法一样，都是show）</p>
<p>在后期对早先的某次提交加注标签(只需要提供校验的前几位字符即可)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></div><div class="line"><span class="number">9</span>fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</div><div class="line">￼$ git tag -<span class="operator">a</span> v1<span class="number">.2</span> <span class="number">9</span>fceb02</div></pre></td></tr></table></figure>

<p><code>$ git push origin v1.5</code>把标签传到服务器上</p>
<p><code>$ git push origin --tags</code>一次把所有标签一起传到服务器上</p>
<p><code>$ git push origin:refs/tags/v1.4</code>把推送的标签从云端删除</p>
<h4 id="创建分支">创建分支</h4><p><code>git branch</code>查看当前的分支</p>
<p><code>git checkout -b branch1</code>创建并且切换到分支branch1</p>
<p><code>git branch branch1</code>创建分支，但不切换到该分支</p>
<p><code>git checkout master</code>切换分支</p>
<p><code>git merge</code>合并分支</p>
<p><code>git branch -d branch1</code>删除branch1分支</p>
<p><code>git branch -D branch1</code>强行删除没有合并过的分支</p>
<p>当出现merge conflict冲突的时候，conflict出现的部分会相应的显示到当前分支文件中，我们只需要修改当前分支文件，使其符合自己原本期望的更改状态，然后重新提交，再删除合并分支即可</p>
<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-12-06 11.32.00.png" alt="branch"></p>
<p><a href="https://sandofsky.com/images/fast_forward.pdf" target="_blank" rel="external">Fast-Forward模式与--No-ff模式的区别</a></p>
<p><code>git merge --no-ff -m &quot;merge with no ff&quot; dev</code></p>
<p><code>git stash</code>可以暂存当前的编辑状态，比如你突然接到一个调bug的任务，但又不想提交现在的dev，就可以用stash暂存当前的编辑状态，等bug调完再回来搞dev分支</p>
<p><code>git stash pop</code>恢复现场并且删除刚才保存的stash</p>
<p><code>git stash apply stash@{0}</code>恢复一种一个现场但不删除刚才的stash</p>
<h3 id="输出格式参数">输出格式参数</h3><table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%H</td>
<td>提交对象(commit)的完整哈希字串 %h 提交对象的简短哈希字串</td>
</tr>
<tr>
<td>%T</td>
<td>树对象(tree)的完整哈希字串</td>
</tr>
<tr>
<td>%t</td>
<td>树对象的简短哈希字串</td>
</tr>
<tr>
<td>%P</td>
<td>父对象(parent)的完整哈希字串 %p 父对象的简短哈希字串</td>
</tr>
<tr>
<td>%an</td>
<td>作者(author)的名字</td>
</tr>
<tr>
<td>%ae</td>
<td>作者的电子邮件地址</td>
</tr>
<tr>
<td>%ad</td>
<td>作者修订日期(可以用 -date= 选项定制格式) %ar 作者修订日期,按多久以前的方式显示</td>
</tr>
<tr>
<td>%cn</td>
<td>提交者(committer)的名字</td>
</tr>
<tr>
<td>%ce</td>
<td>提交者的电子邮件地址</td>
</tr>
<tr>
<td>%cd</td>
<td>提交日期</td>
</tr>
<tr>
<td>%cr</td>
<td>提交日期,按多久以前的方式显示 %s 提交说明</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>按补丁格式显示每个更新之间的差异。</td>
</tr>
<tr>
<td>--stat</td>
<td>显示每次更新的文件修改统计信息。</td>
</tr>
<tr>
<td>--shortstat</td>
<td>只显示 --stat 中最后的行数修改添加移除统计。</td>
</tr>
<tr>
<td>--name-only</td>
<td>仅在提交信息后显示已修改的文件清单。</td>
</tr>
<tr>
<td>--name-status</td>
<td>显示新增、修改、删除的文件清单。</td>
</tr>
<tr>
<td>--abbrev-commit</td>
<td>仅显示 SHA-1 的前几个字符,而非所有的 40 个字符。</td>
</tr>
<tr>
<td>--relative-date</td>
<td>使用较短的相对时间显示(比如,“2 weeks ago”)。</td>
</tr>
<tr>
<td>--graph</td>
<td>显示 ASCII 图形表示的分支合并历史。</td>
</tr>
<tr>
<td>--pretty</td>
<td>使用其他格式显示历史提交信息。可用的选项包括 oneline,short,full,fuller 和 format(后跟指定格式)。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-(n)</td>
<td>仅显示最近的 n 条提交</td>
</tr>
<tr>
<td>--since, --after</td>
<td>仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。</td>
</tr>
<tr>
<td>--author</td>
<td>仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://xiublog.qiniudn.com/github&amp;git.jpg" alt="github&amp;git"></p>
<h3 id="git-与-github对接:">Git 与 Github对接:</h3><blockquote>
<ol>
<li><code>cd</code> 到当前文档</li>
<li><code>git init</code>初始化git</li>
<li><code>git add -A</code> 将所有文件提交到暂存区</li>
<li><code>git commit -m &quot;xxx&quot;</code>将所有暂存区文件提交仓库</li>
<li><code>git remote add origin git@github.com:xiucode/font-end-beginner.git</code>对接远程库</li>
<li><code>git clone git@github.com:xiuocde/gitskills.git</code>直接把远程仓库克隆到本地</li>
<li><code>git fetch origin</code>从远程库拉取内容到本地，不合并</li>
<li><code>git pull</code>从远程库拉取内容到本地，并且合并 </li>
<li><code>git push origin master</code>将本地仓库推送到远程仓库</li>
<li><code>git pull</code>根据远程仓库更新本地仓库</li>
</ol>
</blockquote>
]]>
    
    </summary>
    
      <category term="Git" scheme="www.xiuyuliang.com/tags/Git/"/>
    
      <category term="Github" scheme="www.xiuyuliang.com/tags/Github/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Matlab学习笔记]]></title>
    <link href="www.xiuyuliang.com/2014/11/26/Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>www.xiuyuliang.com/2014/11/26/Matlab学习笔记/</id>
    <published>2014-11-25T17:21:26.000Z</published>
    <updated>2014-12-04T03:58:12.000Z</updated>
    <content type="html"><![CDATA[<p>由于考虑在数学建模上有所精进，再加上大三课程需要通过Matlab进行数字图像处理，所以决定认真的熟悉一遍Matlab的基本操作，本文主要记录一些学习Matlab过程中的一些琐碎的易忘的知识点，以待日后翻阅查看。</p>
<a id="more"></a>


<h4 id="快捷键">快捷键</h4><ul>
<li><code>cmd+k</code> 清除指令界面</li>
<li><code>quit</code> 退出matlab</li>
</ul>
<h4 id="指令集合">指令集合</h4><ul>
<li><code>whos</code> 可以查询迄今为止所有定义的变量的类型、内存空间、是否复数,<code>who</code>只查看变量名称</li>
<li><code>clear</code> 清除全部变量，<code>clear x y z</code>清除制定变量</li>
<li><code>...</code> 用来续行</li>
<li><code>format short/long</code> 结果精确到4位小数或者16位小数，<code>format short e</code>用科学计数法计数，<code>format rat</code> 查找最近结果的比例式</li>
<li><code>%</code> 注释标记</li>
</ul>
<h4 id="数学运算符">数学运算符</h4><ul>
<li><code>pi</code> 相当于派</li>
<li><code>abs</code>求绝对值</li>
<li><code>exp(a)</code> 求解e的a次方</li>
<li><code>sqrt(a)</code> 对a开根号</li>
<li><code>log(a)</code> 求a的自然对数ln(a)，<code>log10(a)</code> 求10为底的a的对数</li>
<li><code>sin</code> <code>cos</code> <code>tan</code> <code>atan</code> 三角函数随便用</li>
<li><code>a/b</code>是右除，意思是a➗b</li>
<li><code>a\b</code>是左除，意思是b➗a</li>
<li>运算顺序：幂运算优于乘除，右除优于左除</li>
<li>在赋值语句后面加 <code>;</code> 可以只起到赋值的效果，不输出 <code>x=20</code> 的赋值结果（不显示在命令窗口）</li>
<li><code>2 +3i</code> 表示复数就可以用i</li>
<li><code>.^</code>幂次方运算需要在<code>^</code>之前加<code>.</code></li>
</ul>
<h4 id="线性代数">线性代数</h4><ul>
<li>行向量 a=[1,2,3] a=[1 2 3], 列向量 b=[1;2;3]</li>
<li>引用向量的个别“单行单列”元素<code>a(1),a(4:6),a(:)</code>第三个是显示a向量所有的元素</li>
<li>引用向量的个别“多行多列”元素<code>a(2,3) a(:,2) a(:,2:3) a(1:2,2:3)</code>第二行第三列，第二列，第二列和第三列，一二行二三列，<code>a(1,:)=[]</code>,删除第一行</li>
<li>复制行创建新矩阵<code>a([1,2,1],:)</code>，复制一行放在一行，复制二行放在二行，复制一行放在三行</li>
<li>转置运算用 <code>&#39;</code> ，加减乘除直接算</li>
<li>向量合并，行向量用<code>,</code>合并，列向量用<code>;</code>合并</li>
<li><code>a=[0:2:10]</code>创建从0到10间隔2的等差行向量</li>
<li><code>a=logspace(0,1,5)</code>创建从10^0到10^1之间含有5个等差元素的点，注意是圆括号（）</li>
<li><code>length(a),max(a),min(a)</code>分别求解出- 矩阵的个数，最大值，最小值</li>
<li>求模（繁琐版）对于实数 <code>sqrt(sum(a.*a))</code> 对于复数<code>sqrt(sum(a.*conj(a)))</code></li>
<li><code>dot(a,b) cross(a,b)</code>点乘（对应元素相乘并求和）和叉乘</li>
<li>当a是带有复数的矩阵，<code>&#39;</code>是转置加共轭，而<code>.&#39;</code>是单纯的转置</li>
<li><code>.*</code>是对应位置元素相乘（行乘行），<code>*</code>是矩阵相乘（行乘列）</li>
<li><code>./``.\``.^</code>分别是右除，左除和幂次方，换句话说只要是加<code>.</code>基本都是对应位置元素互相运算</li>
<li><code>zeros(m),zeros(m,n) eye(m),eye(m,n)</code>分别是零矩阵和单位矩阵</li>
<li><code>det(a)</code>求矩阵a的行列式，助力求解多元一次方程的解</li>
<li><code>rank(a)</code>求矩阵a的秩</li>
<li><code>inv(a)</code>求矩阵a的逆矩阵，<code>det(a) != 0</code>的矩阵a才有逆矩阵</li>
</ul>
<h4 id="绘制图像">绘制图像</h4><ul>
<li><code>x=[0:0.1:10]; y=cos(x); plot(x,y),xlabel(&#39;x&#39;),ylabel(&#39;cos(x)&#39;),gird on,axis equal,legend(&#39;cos(x)&#39;);</code>绘制图像+加坐标轴标签+网格+坐标轴间隔相同+图例，当更新x的区间或者间隔的时候，需要重新调用y=cosx来更新y值，否则会报错</li>
<li><code>fplot(&#39;exp(-2*t)*sin(t)&#39;,[0, 4]), xlabel(&#39;t&#39;), ylabel(&#39;f(t)&#39;), title(&#39;阻尼弹力&#39;)</code>fplot自动计算间隔，画出平滑的曲线</li>
<li><code>axis ( [xmin xmax ymin ymax] )</code>确定绘图的x轴和y轴的绘图范围</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t = [<span class="number">0</span>:<span class="number">0.02</span>:<span class="number">4</span>];</div><div class="line">f = <span class="built_in">exp</span>(-<span class="number">2</span>*t)*<span class="built_in">sin</span>(t);</div><div class="line">??? Error using ==&gt; mtimes</div><div class="line">Inner <span class="keyword">matrix</span> dimensions must agree.</div></pre></td></tr></table></figure>

<ul>
<li><p>当一个函数是由二个或更多个函数相乘构成,别忘记在相乘时加上“.”以便告诉 MATLAB 我们是对两个矩阵进行相乘。应改为<code>t = [0:0.02:4];f = exp(-2*t).*sin(t);</code></p>
</li>
<li><p>同时画两条曲线，<code>plot(t,f,&#39;-&#39;,t,g,&#39;--&#39;)</code> </p>
</li>
<li>实线&#39;-&#39;虚线&#39;--&#39;虚点线&#39;-.&#39;点线 &#39;:&#39;`</li>
<li>同时画两条实线，并且确定两条实现的颜色和虚实<code>plot(x,y,&#39;r&#39;,x,z,&#39;b--&#39;)</code></li>
</ul>
<p>MATLAB 颜色说明符</p>
<table>
<thead>
<tr>
<th style="text-align:left">颜色</th>
<th style="text-align:left">key</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">黑色</td>
<td style="text-align:left">k</td>
</tr>
<tr>
<td style="text-align:left">白色</td>
<td style="text-align:left">w</td>
</tr>
<tr>
<td style="text-align:left">红色</td>
<td style="text-align:left">r</td>
</tr>
<tr>
<td style="text-align:left">黄色</td>
<td style="text-align:left">y</td>
</tr>
<tr>
<td style="text-align:left">绿色</td>
<td style="text-align:left">g</td>
</tr>
<tr>
<td style="text-align:left">蓝色</td>
<td style="text-align:left">b</td>
</tr>
<tr>
<td style="text-align:left">青色</td>
<td style="text-align:left">c</td>
</tr>
<tr>
<td style="text-align:left">洋红</td>
<td style="text-align:left">m</td>
</tr>
</tbody>
</table>
<ul>
<li>绘制子图使用命令 subplot(m, n, p),这里 m 和 n 告诉 MATLAB 产生的产生的子图有 m 行和 n 列,p 用来告诉 MATLAB 我们所要贴上去的 某个已经绘制的图形窗口在第几个块中，记住，要先subplot开辟空白表，在plot画上图像</li>
<li><code>x = linspace(a,b)</code>
MATLAB 会在 a 到 b 间取出均匀分布的 100 个点(或行向量),如果写成
 <code>x = linspace(a,b,n)</code>
那么 MATLAB 会在 a、b 之间取出均匀分布的 n 个点。</li>
<li>加<code>hold on</code>可以使得两个图像重叠，而不必清除原有重新绘制</li>
<li></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于考虑在数学建模上有所精进，再加上大三课程需要通过Matlab进行数字图像处理，所以决定认真的熟悉一遍Matlab的基本操作，本文主要记录一些学习Matlab过程中的一些琐碎的易忘的知识点，以待日后翻阅查看。</p>
]]>
    
    </summary>
    
      <category term="Matlab" scheme="www.xiuyuliang.com/tags/Matlab/"/>
    
      <category term="数学建模" scheme="www.xiuyuliang.com/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[许岑Keynote教学[知识点梳理]]]></title>
    <link href="www.xiuyuliang.com/2014/11/23/%E8%AE%B8%E5%B2%91Keynote%E6%95%99%E5%AD%A6%5B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%5D/"/>
    <id>www.xiuyuliang.com/2014/11/23/许岑Keynote教学[个人笔记]/</id>
    <published>2014-11-22T17:21:26.000Z</published>
    <updated>2014-11-24T09:05:54.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-11-24 16.42.08.png" alt="xucen"></p>
<blockquote>
<p>最近在学习美貌大王-许岑的《keynote教学视频》，许岑这个人有很多身份，他是电影学院电影录音艺术专业的学生，在英国留过学，后来成为托福雅思英语名师，曾经在罗永浩的“老罗英语培训”任教；同时他还是一个音乐人，他的专辑《在平坦的道路上曲折前行》，狂销一百多张（看来是玩票的）；现在他在罗永浩的锤子公司任职，负责一些App原型交互设计等美工方面的工作，当然，最让他引以为豪、也让他声名鹊起的，是这样一个身份——罗永浩大型公开演讲的御用幻灯片制作人。</p>
</blockquote>
<a id="more"></a>


<p>最近在学习美貌大王-许岑的《keynote教学视频》，许岑这个人有很多身份，他是电影学院电影录音艺术专业的学生，在英国留过学，后来成为托福雅思英语名师，曾经在罗永浩的“老罗英语培训”任教；同时他还是一个音乐人，他的专辑《在平坦的道路上曲折前行》，狂销一百多张（看来是玩票的）；现在他在罗永浩的锤子公司任职，负责一些App原型交互设计等美工方面的工作，当然，最让他引以为豪、也让他声名鹊起的，是这样一个身份——罗永浩大型公开演讲的御用幻灯片制作人，从《我的奋斗》到《一个理想主义者的创业故事》，再到锤子手机的smartisan ROM发布会和锤子手机T1发布会，老罗的所有大型公开演讲的Keynote，都是许岑操刀制作，老罗的口才加上许岑低调奢华有内涵的keynote，成功的征服了包括我在内的众多听众，而前不久，许岑把他的keynote制作技巧录制成教学视频，在淘宝上售卖，现在为止已经卖到了接近四千的销量，并且好评如潮，作为一个喜欢追寻潮流的人，我也在第一时间买下了这门90块的课程，并准备最接下来的几天边学边练。美貌大王的视频录的很考究，语言字正腔圆不卡顿，教学逻辑顺溜，当然这些都是必须的，但还有一件事让我百思不得其解——他在视频中几乎没有眨过眼睛，想必是完美主义性格在作祟吧，但这不是坏事，我认为，在多媒体制作这种事情上，完美主义，是一种必备的素质。</p>
<ol>
<li>4：3的比例可以适应大部分的演讲幕布宽高比，而16：9就是我们经常说的1080P，适合手机平板播放。</li>
<li><code>cmd+R</code>启动校准线，右键呼出各种对齐方式和间距校准方式。</li>
<li>当需要在同一张keynote里面展现1234点内容的时候，学会用调整透明度opancity-10%的方式，依次显示1234，这样可以防止当演讲者说1的时候，观众的注意力会被分散到234，调整到50%的透明度，可以保证演讲者的注意力始终放在最高亮的那一个点，最后1234说完后，采取一个渐现dissolve的方式，将1234全部展现，力图给观众一个完整的回味。</li>
<li>一致性和完整性很重要，三个统一的3D小人，手机app演示从一个launcher发散到各个不同的app，叠化不能乱用，要符合逻辑，尽可能将多个并列内容整合到一个“概”中。</li>
<li>使用放大镜取色，可以使幻灯片的文字与图片拥有更好的统一性。</li>
<li>单独的一张竖版照片可以放在一个画框，背景加一个家居的背景，更具有拟物化。</li>
<li>instant alpha通道去除不规则白边。</li>
<li>上一页和下一页如果有公用的元素，用magic move的动作可以大大增加幻灯片的逻辑性。</li>
<li>演讲的流程：</li>
</ol>
<ul>
    <li>写出逐字稿</li>
    <li>读熟逐字稿</li>
    <li>寻找幻灯片制作素材</li>
    <li>制作幻灯片</li>
    <li>与主办方确定演讲场地</li>
    <li>根据场地情况适当修改幻灯片</li>
    <li>根据幻灯片独自试讲</li>
    <li>面对小部分听众试讲</li>
    <li>再次完善幻灯片</li>
    <li>手握遥控器上台</li>
</ul>

<p><strong>如果你想购买的话，可以点击下面的链接</strong>
<a href="http://item.taobao.com/item.htm?spm=a1z09.2.9.11.N7DfDL&amp;id=40975579044" target="_blank" rel="external">许岑的幻灯片制作软件 Keynote 视频教程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-11-24 16.42.08.png" alt="xucen"></p>
<blockquote>
<p>最近在学习美貌大王-许岑的《keynote教学视频》，许岑这个人有很多身份，他是电影学院电影录音艺术专业的学生，在英国留过学，后来成为托福雅思英语名师，曾经在罗永浩的“老罗英语培训”任教；同时他还是一个音乐人，他的专辑《在平坦的道路上曲折前行》，狂销一百多张（看来是玩票的）；现在他在罗永浩的锤子公司任职，负责一些App原型交互设计等美工方面的工作，当然，最让他引以为豪、也让他声名鹊起的，是这样一个身份——罗永浩大型公开演讲的御用幻灯片制作人。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Keynote" scheme="www.xiuyuliang.com/tags/Keynote/"/>
    
      <category term="许岑" scheme="www.xiuyuliang.com/tags/%E8%AE%B8%E5%B2%91/"/>
    
      <category term="知识梳理" scheme="www.xiuyuliang.com/tags/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
      <category term="多媒体制作" scheme="www.xiuyuliang.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93%E5%88%B6%E4%BD%9C/"/>
    
      <category term="多媒体制作" scheme="www.xiuyuliang.com/categories/%E5%A4%9A%E5%AA%92%E4%BD%93%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《objective-c程序设计》笔记[Foundation框架篇]]]></title>
    <link href="www.xiuyuliang.com/2014/11/20/%E3%80%8Aobjective-c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%5Bfoundation%E6%A1%86%E6%9E%B6%E7%AF%87%5D/"/>
    <id>www.xiuyuliang.com/2014/11/20/《objective-c程序设计》[foundation框架篇]/</id>
    <published>2014-11-19T17:21:26.000Z</published>
    <updated>2014-11-20T06:47:08.000Z</updated>
    <content type="html"><![CDATA[<p>本文举例讲解了使用objective-c语言时，与Foundation框架有关系的一些语法规则。
<a id="more"></a></p>
<h3 id="快速查看头文件、方法和类的文档：">快速查看头文件、方法和类的文档：</h3><p>鼠标移到文本上+option+点击鼠标
面板右上角有一个书本icon和一个h字母icon，前者用来查看有关文档，后者会显示包含选择项目的头文件</p>
<h3 id="数字对象">数字对象</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import<span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">	<span class="keyword">@autoreleasepool</span></div><div class="line">	{</div><div class="line">		<span class="built_in">NSNumber</span> *intNumber, *floatNumber, *charNumber,*intNumber2;</div><div class="line">		<span class="built_in">NSInteger</span> myInt;</div><div class="line"></div><div class="line">		intNumber = [<span class="built_in">NSNumber</span> numberWithInteger: <span class="number">100</span>];<span class="comment">//intNumber是一个值为100的integer对象</span></div><div class="line">		intNumber2 = [<span class="built_in">NSNumber</span> numberWithInt: <span class="number">200</span>];</div><div class="line">		<span class="built_in">NSString</span> *str = <span class="string">@"Programming is boring!"</span>;</div><div class="line">		myInt = [intNumber integerValue];<span class="comment">//myint不是对象，NSInteger是一个typedef，是64位的long或者是32位的int，NSUInteger是无符号整数</span></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The int is %li"</span>,(<span class="keyword">long</span>)myInt);</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"This int2 is %i"</span>,[intNumber2 intValue]);</div><div class="line"></div><div class="line">		<span class="comment">//@可以所谓指向一个对象的通配符，这个对象可以使NSNumber或者NSString</span></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,str);</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The int is %@"</span>,intNumber);</div><div class="line">		</div><div class="line"></div><div class="line">		<span class="comment">//NSLog(@"ThiS init is %li",(long)[intNumber integerValue]);报错，必须是格式一致的输出才有效</span></div><div class="line"></div><div class="line">		<span class="comment">//numberWithFloat,numberWithInt,numberWithChar都是创建加初始化，单独的初始化用initWithInit,initWithChar...</span></div><div class="line">		floatNumber = [<span class="built_in">NSNumber</span> numberWithFloat: <span class="number">100.0</span>];</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"This float is %g"</span>,[floatNumber floatValue]);</div><div class="line"></div><div class="line">		charNumber = [<span class="built_in">NSNumber</span> numberWithChar: <span class="string">'x'</span>];</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"This char is %c"</span>,[charNumber charValue]);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>([floatNumber isEqualToNumber: intNumber] == <span class="literal">YES</span>)</div><div class="line">			<span class="built_in">NSLog</span>(<span class="string">@"Equal!"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//A&gt;B返回NSOrderDescending,A=B返回NSOrderSame,A&lt;B返回NSOrerAscending</span></div><div class="line">		<span class="keyword">if</span>([intNumber compare: floatNumber] == NSOrderedAscending)</div><div class="line">			<span class="built_in">NSLog</span>(<span class="string">@"Init is less than float!"</span>);</div><div class="line"></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><img src="http://xiublog.qiniudn.com/屏幕截图 2014-11-20 10.55.43.png" alt="Data type and format specification"></p>
<h3 id="关于@对于对象的使用">关于@对于对象的使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">		intNumber2 = [<span class="built_in">NSNumber</span> numberWithInt: <span class="number">200</span>];</div><div class="line">		<span class="built_in">NSString</span> *str = <span class="string">@"Programming is boring!"</span>;</div><div class="line">		myInt = [intNumber integerValue];<span class="comment">//myint不是对象，NSInteger是一个typedef，是64位的long或者是32位的int，NSUInteger是无符号整数</span></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The int is %li"</span>,(<span class="keyword">long</span>)myInt);</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"This int2 is %i"</span>,[intNumber2 intValue]);</div><div class="line"></div><div class="line">		<span class="comment">//@可以所谓指向一个对象的通配符，这个对象可以使NSNumber或者NSString</span></div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,str);</div><div class="line">		<span class="built_in">NSLog</span>(<span class="string">@"The int is %@"</span>,intNumber);</div><div class="line"></div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span> *)description</div><div class="line">{</div><div class="line">	<span class="keyword">return</span>(<span class="built_in">NSString</span> stringWithFormat: <span class="string">@"%i,%i"</span>,numerator,decominator);</div><div class="line">}</div><div class="line"></div><div class="line">sum = [fi add:f2];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The sum of %@ and %@ is %@"</span>,f1,f2,sum);</div></pre></td></tr></table></figure>

<h3 id="nsstring和nsmutabelstring各自的方法">NSString和NSMutabelString各自的方法</h3><h3 id="nsmutablearray的用法，分别输出单个对象和整个数组对象">NSMutableArray的用法，分别输出单个对象和整个数组对象</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#import&lt;Foundation/Foundation.h&gt;</span></div><div class="line"></div><div class="line">int main(int argc, char const *argv[])</div><div class="line">{</div><div class="line">	@autoreleasepool</div><div class="line">	{</div><div class="line">		NSMutableArray *numbers = [NSMutableArray array];</div><div class="line">		NSNumber *myNumber;</div><div class="line">		int i;</div><div class="line"></div><div class="line">		for(i=0;i&lt;10;i++)</div><div class="line">		{</div><div class="line">			myNumber = [NSNumber numberWithInteger: i];</div><div class="line">			[numbers addObject: myNumber];</div><div class="line">		}</div><div class="line"></div><div class="line">		//输出从numbers中每一个值，赋给myNumber对象，进行输出</div><div class="line">		for(i=0;i&lt;10;i++)</div><div class="line">		{</div><div class="line">			myNumber = [numbers objectAtIndex: i];</div><div class="line">			NSLog(@<span class="string">"%@"</span>,myNumber);</div><div class="line">		}</div><div class="line"></div><div class="line">		//直接输出numbers这个对象</div><div class="line">		NSLog(@<span class="string">"%@"</span>,numbers);</div><div class="line">		</div><div class="line">	}</div><div class="line">	return 0;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>本文举例讲解了使用objective-c语言时，与Foundation框架有关系的一些语法规则。
]]>
    
    </summary>
    
      <category term="objective-c" scheme="www.xiuyuliang.com/tags/objective-c/"/>
    
      <category term="Foudation框架" scheme="www.xiuyuliang.com/tags/Foudation%E6%A1%86%E6%9E%B6/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《objective-c程序设计》笔记[OC基础语法篇]]]></title>
    <link href="www.xiuyuliang.com/2014/10/31/%E3%80%8Aobjective-c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AF%AD%E6%B3%95%E7%AF%87/"/>
    <id>www.xiuyuliang.com/2014/10/31/《objective-c程序设计》笔记——语法篇/</id>
    <published>2014-10-30T17:21:26.000Z</published>
    <updated>2014-11-20T12:07:04.000Z</updated>
    <content type="html"><![CDATA[<p>本文举例讲解了objective-c语言的基本语法
<a id="more"></a></p>
<h4 id="terminal编译oc代码的指令：">Terminal编译OC代码的指令：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">mkdir</span> test01</div><div class="line"><span class="keyword">cd</span> test01</div><div class="line"><span class="keyword">vi</span> main.<span class="keyword">m</span></div><div class="line">clang -fobjc-arc -framework Foundation main.<span class="keyword">m</span> -<span class="keyword">o</span> test01</div><div class="line">./test01</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">autoreleasepool{</span> </span></div><div class="line"><span class="function">NSLog</span>(@<span class="string">"Program is running!"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>@autoreleasepool:应用创建新对象时，系统能够有效的管理应用使用的内存
NSLog：</p>
<ol>
<li>后面参数中的@&quot;....&quot;成为常量NSString对象,如果不加@，就是常量C类型的字符串</li>
<li>NSLog函数会输出函数的执行日期与实践、程序名、以及其他一些数值</li>
</ol>
<h4 id="创建类和对象的方式：（分数程序-分子/分母）">创建类和对象的方式：（分数程序-分子/分母）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  main.m</span></div><div class="line"><span class="comment">//  OC-Test01</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by 修宇亮 on 14-7-22.</span></div><div class="line"><span class="comment">//  Copyright (c) 2014年 修宇亮. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Fraction</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>) setNumeration : (<span class="keyword">int</span>) n;</div><div class="line">-(<span class="keyword">void</span>) setDenomination : (<span class="keyword">int</span>) d;</div><div class="line">-(<span class="keyword">int</span>) numeration;</div><div class="line">-(<span class="keyword">int</span>) denomination;</div><div class="line">-(<span class="keyword">void</span>) print ;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Fraction</span></span></div><div class="line"></div><div class="line">{   <span class="keyword">int</span> Numeration;</div><div class="line"><span class="keyword">int</span> Denomination;</div><div class="line">}</div><div class="line"><span class="comment">//声明变量最好在@implementaion，这样可以保证数据的封装性</span></div><div class="line"><span class="comment">//如果只声明一行数据，可以不用大括号</span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>) setNumeration:(<span class="keyword">int</span>)n</div><div class="line">{</div><div class="line">Numeration = n;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>) setDenomination:(<span class="keyword">int</span>)d</div><div class="line">{</div><div class="line">Denomination = d;</div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">int</span>) numeration{</div><div class="line"></div><div class="line"><span class="keyword">return</span> Numeration;</div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">int</span>) denomination{</div><div class="line"></div><div class="line"><span class="keyword">return</span> Denomination;</div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)print</div><div class="line">{</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The fraction is %i / %i"</span>,Numeration,Denomination);</div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</div><div class="line">{</div><div class="line"></div><div class="line"><span class="keyword">@autoreleasepool</span> {</div><div class="line"></div><div class="line">Fraction *frac1 = [[Fraction alloc]init];</div><div class="line">Fraction *frac2 = [[Fraction alloc]init];</div><div class="line"><span class="comment">//另一种写法：Fraction *frac1 = [Fraction new];</span></div><div class="line"><span class="comment">//但建议用第一种方法书写，因为这样可以更加容易的理解“先分配内存空间，再初始化对象”这个过程</span></div><div class="line"></div><div class="line">[frac1 setNumeration : <span class="number">2</span>];</div><div class="line">[frac1 setDenomination:<span class="number">3</span>];</div><div class="line"></div><div class="line"></div><div class="line">[frac2 setNumeration : <span class="number">2</span>];</div><div class="line">[frac2 setDenomination:<span class="number">7</span>];</div><div class="line"></div><div class="line">[frac1 print];</div><div class="line">[frac2 print];</div><div class="line"><span class="comment">//另一种写法：</span></div><div class="line"><span class="comment">//NSLog(@"The fraction is %i / %i",[frac1 numeration],[frac1 denomination]);</span></div><div class="line"><span class="comment">//体现了每个对象中数据的封装性，外界只有通过创建对象或者访问已有对象，才能获得该对象的数据</span></div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="数据类型和表达式">数据类型和表达式</h4><h5 id="nslog转换字符：">NSLog转换字符：</h5><table>
<thead>
<tr>
<th style="text-align:left">int</th>
<th style="text-align:left">char</th>
<th style="text-align:left">float</th>
<th style="text-align:left">double</th>
<th style="text-align:left">id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%i</td>
<td style="text-align:left">%c</td>
<td style="text-align:left">%f,%e,%g,%a</td>
<td style="text-align:left">%f,%e,%g,%a</td>
<td style="text-align:left">%p</td>
</tr>
</tbody>
</table>
<p>%f是指用浮点数的形式输出，也就是用小数了
%e是用指数的形式输出
%g是选用%f%e中较短的一种形式输出</p>
<h5 id="浮点数科学计数法：">浮点数科学计数法：</h5><p>1.7e4 = 1.7*10^4</p>
<h5 id="限定词：">限定词：</h5><p>long:修饰int，double，float，以扩大值域，可以连续运用，如long long int
short：与long的效果相反，可以起到节约内存的作用
unsigned：只有正值，没有负值，从而扩大正值的值域
id：通用类型，id object，在多态和动态绑定中有重要作用</p>
<h5 id="模运算符">模运算符</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">NSLog</span>(<span class="at_rule">@<span class="string">"a%%b = %i"</span>,a%b);</span></div><div class="line"><span class="comment">//当需要在输出的字符串中加入%时，需要用%%，%相当于java中的\转义符</span></div><div class="line"><span class="comment">//%是取模运算，得到的结果是余数</span></div><div class="line"><span class="comment">//如果数据类型是int，那么/运算的结果是整数，小数部分被砍掉了</span></div><div class="line"><span class="comment">//a/b+a%b = a</span></div></pre></td></tr></table></figure>

<h5 id="类型强制转换">类型强制转换</h5><p>15/10 = 1
(float)15/10 = 1.5000
(float)15/(float)10 = 1.5000</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">id <span class="keyword">object</span>;</div><div class="line">Fraction *myfraction;</div><div class="line">myfraction = (Fraction *) <span class="keyword">object</span>;<span class="comment">//将id强制类型转换为Fraction *</span></div></pre></td></tr></table></figure>

<h5 id="键盘输入">键盘输入</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scan(<span class="string">"%i"</span>,&<span class="built_in">number</span>)<span class="comment">;//这里不需要@，这里是C语法，不是NSString类型参量</span></div><div class="line">scan(<span class="string">" %c"</span>,<span class="keyword">char</span>)<span class="comment">;//注意，这里%c之前有一个空格，功能是自动跳过空白字符（空格，回车，换                 //行符，制表符），需要从键盘输入单个字符的时候要尤其注意这一点</span></div></pre></td></tr></table></figure>

<h5 id="break-&amp;-continue">break &amp; continue</h5><p>break:跳出循环，从循环后面的语句执行
continue：跳出正在执行的本次循环，从下一次循环开始执行，但仍旧在循环之内运行</p>
<h4 id="关于类：">关于类：</h4><h5 id="工程中文件的分布：">工程中文件的分布：</h5><p>一般在写项目的时候
interface和implementation是分开在两个文件里面写的
class.h和class.m
其中class.m需要导入class.h
而main.m也需要导入class.h，但不需要导入class.m
这种文件分配，很有利于大量代码的管理</p>
<h5 id="自动生成取值、设值方法">自动生成取值、设值方法</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface</div><div class="line">@property int a,b;</div><div class="line"><span class="header">@end</span></div><div class="line">-----------------</div><div class="line">@implementation</div><div class="line">@synthesize a,b;</div><div class="line">@end</div></pre></td></tr></table></figure>

<h5 id="使用点运算符访问属性">使用点运算符访问属性</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span>.<span class="keyword">property</span> == [<span class="keyword">object</span> <span class="keyword">property</span>]</div><div class="line"><span class="comment">//点运算符多用于取值设值的时候，如果是单纯调用方法，还是推荐用[]</span></div></pre></td></tr></table></figure>

<h5 id="具有多个参数的方法">具有多个参数的方法</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@interface</div><div class="line">-(void) setTo : (int) n over : (int) m</div><div class="line"><span class="header">@end</span></div><div class="line">---------------------</div><div class="line">@implementation</div><div class="line">-(void) setTo : (int) n over : (int) m</div><div class="line">{</div><div class="line">numeration = n;</div><div class="line">denomination = m;</div><div class="line">}</div><div class="line"><span class="header">@end</span></div><div class="line">----------------------</div><div class="line">main.m</div><div class="line">[object setTo :1 over :3];</div><div class="line">----------------------</div></pre></td></tr></table></figure>

<h5 id="求最大公约数">求最大公约数</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) reduce : (Fraction *) f </div><div class="line">{</div><div class="line"><span class="keyword">int</span> u = f.numeration;</div><div class="line"><span class="keyword">int</span> v = f.denomination;</div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(temp!=<span class="number">0</span>)</div><div class="line">{</div><div class="line">temp = u%v;</div><div class="line">u = v;</div><div class="line">v= temp</div><div class="line">}</div><div class="line"></div><div class="line">f.numeration \= u;</div><div class="line">f.denomination \= u;</div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="关键字">关键字</h5><p>static:
累加器，在方法中修饰局部变量可以使得局部变量可以实现累加功能，不会因为每次重新初始化而使得局部变量“归零”</p>
<p>self:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-(void) add : (Fraction <span class="keyword">*</span>) f</div><div class="line">{</div><div class="line">//a/b+c/d = (a<span class="keyword">*</span>d+c<span class="keyword">*</span>b)/b<span class="keyword">*</span>d</div><div class="line"></div><div class="line">numeration = f.numeration<span class="keyword">*</span>denomination+f.denomination<span class="keyword">*</span>numeration;</div><div class="line">denomination = denomination<span class="keyword">*</span>f.denomination;</div><div class="line"></div><div class="line">[self reduce];//直接对得到的结果进行约简，相当于java的this</div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="关于继承">关于继承</h5><p>详情见代码包——Rectangle
main.m(import &quot;XYPoint.h&quot;&amp;&amp;&quot;Rectangle.h&quot;)
XYPoint.h
XYPoint.m(import &quot;XYPoint.h&quot;)
Rectangle.h
Rectangle.m(import &quot;Rectangle.h&quot;)</p>
<h6 id="@class">@class</h6><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">XYPoint</span>;</span></div><div class="line"><span class="comment">//声明，如果下面出现XYPoint字样，说明要使用XYPoint类，相当于一个类名称标记</span></div><div class="line"><span class="comment">//也可以换成#import "XYPoint.h"，但这个样子需要导入和处理整个XYPoint文件，</span></div><div class="line"><span class="comment">//但如果需要调用XYPoint类的方法和参数，则需要导入完整的XXPoint.h文件</span></div><div class="line"><span class="comment">//需要放在@interface之前声明，不能放在之后</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Rectangle</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="keyword">int</span> width,height;</div><div class="line"></div><div class="line">-(<span class="keyword">int</span>) area;</div><div class="line">-(<span class="keyword">int</span>) perimeter;</div><div class="line">-(XYPoint *) origin;</div><div class="line">-(<span class="keyword">void</span>) setWidth : (<span class="keyword">int</span>) w andHeight : (<span class="keyword">int</span>) h;</div><div class="line">-(<span class="keyword">void</span>) setOrigin : (XYPoint *) pt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<h5 id="有关类的问题">有关类的问题</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([com1 isMemberOfClass :[Complex class]] == <span class="literal">YES</span>) ;<span class="comment">//对象是不是该类的成员</span></div><div class="line"><span class="keyword">if</span> ([com1 isKindOfClass :[<span class="built_in">NSObject</span> class]] == <span class="literal">YES</span>) ;<span class="comment">//对象是不是该类或者该类子类的成员</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ([com1 respendsToSelector :<span class="keyword">@selector</span> (setReal:andIma:)] == <span class="literal">YES</span>) ;<span class="comment">//对象能不能响应这个方法</span></div><div class="line"><span class="keyword">if</span> ([Complex instancesRespendToSelector :<span class="keyword">@selector</span> (setReal:)] == <span class="literal">YES</span>) ;<span class="comment">//该类能不能响应这个方法</span></div><div class="line"><span class="keyword">if</span> ([Complex isSubclassOfClass :[<span class="built_in">NSObject</span> class]] == <span class="literal">YES</span>) ;<span class="comment">//该类是不是后面类的子类</span></div></pre></td></tr></table></figure>

<h5 id="有关异常处理">有关异常处理</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">@try</span> </div><div class="line">{</div><div class="line"><span class="keyword">int</span> b = <span class="number">0</span>; </div><div class="line"><span class="keyword">switch</span> (b)  </div><div class="line">{</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>:</div><div class="line"><span class="keyword">@throw</span>(ex);<span class="comment">//b=0，则抛出异常；</span></div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="keyword">break</span>;</div><div class="line">}</div><div class="line">}</div><div class="line"><span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception)<span class="comment">//捕获抛出的异常 </span></div><div class="line">{</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"b==0 Exception!"</span>);</div><div class="line">}</div><div class="line"><span class="keyword">@finally</span> </div><div class="line">{</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"finally!"</span>);</div><div class="line">}</div><div class="line">[ex release];</div><div class="line">}</div><div class="line"><span class="comment">//运行的结果：</span></div><div class="line">b==<span class="number">0</span> Exception!</div><div class="line">finally!</div></pre></td></tr></table></figure>

<h5 id="重写对象的初始函数">重写对象的初始函数</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-(Fraction *) initWith :(<span class="keyword">int</span>) n over: (<span class="keyword">int</span>) d</div><div class="line">{</div><div class="line"><span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">self</span>)</div><div class="line">{</div><div class="line">[<span class="keyword">self</span> setTo :n over :d];</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>) setTo :(<span class="keyword">int</span>) n1 over :(<span class="keyword">int</span>) d1</div><div class="line">{</div><div class="line"><span class="keyword">self</span><span class="variable">.Numeration</span> = n1;</div><div class="line"><span class="keyword">self</span><span class="variable">.Denomination</span> = d1;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//这里之所以使用id的返回值，是为了给后续对init的继承做准备，因为后续需要对init继承的时候，子类的类名和父类是不相同的，因此用id可以规避掉因为类名改变而不断变化返回值类型的麻烦</span></div><div class="line"></div><div class="line">-(<span class="keyword">id</span>) init </div><div class="line">{</div><div class="line"><span class="keyword">return</span> [<span class="keyword">self</span> initWith :<span class="number">0</span> over:<span class="number">0</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>执行语句</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Fraction *frac1 </span>=<span class="string"> [[Fraction alloc]initWith :4 over :6];</span></div></pre></td></tr></table></figure>

<h5 id="实例变量作用域">实例变量作用域</h5><p>@protected : 可被本类及子类访问，interface中定义的变量默认为这种类型</p>
<p>@private ： 仅能被本类的方法访问，implementation中定义的变量默认为是这种类型</p>
<p>@public ： 哪都可以用</p>
<p>@package ： 本类的映像的任何敌方都可以访问这个变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@synthesize<span class="preprocessor"> windown</span> =<span class="preprocessor"> _windown</span>;</span></div><div class="line"><span class="comment">//windown是类的属性，而_windown是具体的类属性的实例变量</span></div><div class="line"></div><div class="line"><span class="attr_selector">[windown makeKey]</span>;<span class="comment">//没法运行</span></div><div class="line"><span class="attr_selector">[_windown makeKey]</span>;<span class="comment">//可以运行</span></div><div class="line"><span class="attr_selector">[self.windown makeKey]</span>;<span class="comment">//可以运行</span></div></pre></td></tr></table></figure>

<h5 id="extern">extern</h5><ol>
<li>如果class A的变量 x 需要被好多个class使用：</li>
</ol>
<p>那么在classA中把x定义成：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x;</div><div class="line">x = <span class="number">100</span>;</div></pre></td></tr></table></figure>

<p>使用该变量的类，可以直接：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x;</div></pre></td></tr></table></figure>

<ol>
<li>如果class A中的变量虽然会被其他class用，但是用的不多：</li>
</ol>
<p>那么class A中把x定义成：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">int x </span>=<span class="string"> 100;</span></div></pre></td></tr></table></figure>

<p>使用该变量的类，可以引用为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x;</div><div class="line">x = <span class="number">200</span>;</div></pre></td></tr></table></figure>

<h5 id="类函数和成员函数">类函数和成员函数</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类函数：可以直接用类名调用,不能有成员变量</span></div><div class="line"><span class="comment">//前置加号（+）的方法为类方法，这类方法是可以直接用类名来调用的，它的作用主要是创建一个实例。有人把它称为创建实例的工厂方法。</span></div><div class="line"><span class="comment">//前置减号（-）的方法为实例方法，必须使用类的实例才可以调用的。</span></div><div class="line"></div><div class="line">Fraction *fraction = [[Fraction allocF]init];</div><div class="line"></div><div class="line">+(Fraction *) init;</div><div class="line">+(Fraction *) allocF;</div><div class="line"></div><div class="line"><span class="comment">//成员函数：必须通过对象调用</span></div><div class="line">Fraction *fraciton = [[Fraction allocF]init];</div><div class="line">fraction.<span class="keyword">count</span> = <span class="number">1</span>;</div><div class="line">[fraction add :<span class="number">3</span> over :<span class="number">4</span>];</div><div class="line"></div><div class="line">-(<span class="keyword">int</span>) <span class="keyword">count</span>;</div><div class="line">-(<span class="keyword">void</span>) add :(<span class="keyword">int</span>) n over(<span class="keyword">int</span>) m;</div><div class="line"></div><div class="line">-----------------------------------------</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter;</div><div class="line"></div><div class="line">+(Fraction *) allocF</div><div class="line">{</div><div class="line">extern <span class="keyword">int</span> counter;</div><div class="line">counter++;</div><div class="line"></div><div class="line"><span class="keyword">return</span> [Fraction alloc];</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">+(<span class="keyword">int</span>) <span class="keyword">count</span></div><div class="line">{</div><div class="line">extern <span class="keyword">int</span> counter;</div><div class="line"><span class="keyword">return</span> counter;</div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="枚举语法和typedef重命名">枚举语法和typedef重命名</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明enum</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span>{north=<span class="number">1</span>,south,east,west};<span class="comment">//1，2，3，4</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span>{north,south,east,west};<span class="comment">//0，1，2，3</span></div><div class="line"><span class="comment">//定义enum对象</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> direction1;</span></div><div class="line">direction1 = (enum Direction) 3;</div><div class="line">//免enum名，定义enum对象</div><div class="line">enum{north,south,east,west} direction2;</div><div class="line"><span class="comment">//typedef重命名enum</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> {</span>north,south,east,west} Direction;</div><div class="line">Direction direction3,direction4;</div><div class="line"></div><div class="line"><span class="comment">//typedef的作用主要是，为一些数据类型起一个“小名”，以方便程序的阅读，比如你写一个int定义x，大家不知道什么意思，但是你写Counter定义一个x，大家就知道，这个x其实是一个计数器</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> int Counter;</div><div class="line"><span class="comment">//这两条定义语句功能相同</span></div><div class="line">int x = <span class="number">1</span>;</div><div class="line">Counter x =<span class="number">1</span>;</div></pre></td></tr></table></figure>

<h5 id="分类与类的扩展">分类与类的扩展</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//Fraction.m</div><div class="line"><span class="comment">#import "Fraction.h"</span></div><div class="line"></div><div class="line">//分类MathOps，在Fraction.m里面一起实现</div><div class="line">//不必列出父类和实例变量，因为这些已经包括在Fraction.h</div><div class="line"></div><div class="line"><span class="comment">@interface Fraction(MathOps)</span></div><div class="line"></div><div class="line">-(Fraction <span class="keyword">*</span>) reduce :(Fraction <span class="keyword">*</span>) f; </div><div class="line">-(Fraction <span class="keyword">*</span>) multiple :(Fraction <span class="keyword">*</span>) f; </div><div class="line">-(Fraction <span class="keyword">*</span>) divide :(Fraction <span class="keyword">*</span>) f; </div><div class="line"></div><div class="line"><span class="comment">@end</span></div><div class="line"></div><div class="line"><span class="comment">@implementation Fraction(MathOps)</span></div><div class="line">-(Fraction <span class="keyword">*</span>) reduce :(Fraction <span class="keyword">*</span>) f</div><div class="line">{</div><div class="line">......</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">@end</span></div></pre></td></tr></table></figure>

<h5 id="类的扩展/未命名分类">类的扩展/未命名分类</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Fraction</span>()</span></div><div class="line"><span class="comment">//括号里面没有命名</span></div><div class="line"><span class="comment">//可以定义实例变量来扩展类，这个是相比于命名分类的一个优势，命名分类不能定义实例变量</span></div><div class="line"><span class="comment">//定义的扩展方法必须在主实现区域内实现，否则会编译报错</span></div><div class="line"><span class="keyword">@property</span> <span class="keyword">int</span> UniqueID;</div><div class="line">-(Fraction *) square :(Fraction *) f; </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Fraction</span>(<span class="title">MathOps</span>)</span></div><div class="line"></div><div class="line">@syntheasize UniqueID;</div><div class="line">-(Fraction *) square :(Fraction *) f</div><div class="line">{</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<h5 id="协议与代理(协议实现的过程代理给继承他的子类)">协议与代理(协议实现的过程代理给继承他的子类)</h5><p>声明一组协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSObject</span><span class="variable">.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCopying</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">id</span>)copyWithZone :(NSZone *)zone;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>实现一组协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> <span class="constant">AddressBook</span> <span class="symbol">:NSObject&lt;NSCopying</span>,<span class="constant">NSCoding</span>&gt;</div><div class="line"><span class="regexp">//</span>虽然不需要定义协议包含的接口，但必须在下面进行实现</div></pre></td></tr></table></figure>

<p>可选择协议与死规定协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//协议都是父类定义，子类实现</span></div><div class="line"><span class="annotation">@protocol</span> Drawing<span class="comment">//死规定协议，继承的子类必须实现</span></div><div class="line">-(<span class="keyword">void</span>) paint;</div><div class="line">-(<span class="keyword">void</span>) erase;</div><div class="line"><span class="annotation">@optional</span><span class="comment">//可选择协议，继承的子类可实现可不实现</span></div><div class="line">-(<span class="keyword">void</span>) outline;</div><div class="line"><span class="annotation">@end</span></div></pre></td></tr></table></figure>

<p>检察一个对象是否遵循Drawing协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>([currentObject conformsToProtocol : <span class="class"><span class="keyword">@protocol</span> (<span class="title">Drawing</span>)] == <span class="title">YES</span>)</span></div><div class="line"><span class="comment">//同类概念——检查一个类是否实现了一个方法</span></div><div class="line"><span class="keyword">if</span> ([Complex instancesRespendToSelector :<span class="keyword">@selector</span> (setReal:)] == <span class="literal">YES</span>) ;</div></pre></td></tr></table></figure>

<p>检察一个对象是否实现了Drawing 协议中的outline方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>([currentObject respondsToSelector : <span class="keyword">@selector</span> (outline) == <span class="literal">YES</span>])</div></pre></td></tr></table></figure>

<p>检察变量的协议一致性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">id&lt;Drawing&gt;</span> currentObject;</span></div></pre></td></tr></table></figure>

<p>扩展现有的协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">protocol</span> <span class="function">Drawing3D</span>(Drawing)</span></div></pre></td></tr></table></figure>

<p>分类也可以实现一组协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Fraction</span> (<span class="title">stuff</span>)&lt;<span class="title">NSCopying</span>,<span class="title">NSCoding</span>&gt;</span></div></pre></td></tr></table></figure>

<h5 id="合成对象">合成对象</h5><p>square是Rectangle类的子类，是父子继承关系，但是Rectangle里面的很多方法并不适用于square，如果只单纯继承，会继承很多无用的方法，因此用下面的代码可以直接新定义一个类，这个类有很多新定义的属于自己的方法，这个方法和分类、子类都是扩展类定义的一种方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//@interface square:Rectangle 这是原来的方法</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">square</span> :<span class="title">NSObject</span></span></div><div class="line">{</div><div class="line">Rectangle *rect;</div><div class="line">}</div><div class="line"></div><div class="line">-(<span class="keyword">int</span>) size;</div><div class="line">-(<span class="keyword">int</span>) setsize: (<span class="keyword">int</span>) s;</div><div class="line">-(<span class="keyword">int</span>) area;</div><div class="line">-(<span class="keyword">int</span>) perimeter;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">square</span></span></div><div class="line">-(<span class="keyword">void</span>) area</div><div class="line">{</div><div class="line"><span class="keyword">return</span> [rect area];<span class="comment">//使用父类方法的方式</span></div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">------------</div><div class="line"><span class="comment">//但是这种方法在初始化的时候需要为square和rectangle都预留一部分地方</span></div><div class="line"><span class="comment">//因此要重写init或者添加initWithSide之类的新方法来分配空间</span></div></pre></td></tr></table></figure>

<h4 id="预处理">预处理</h4><p>预处理语句可以放在任何位置，但是大多数程序员把定义放在头文件，以便在多个源文件中引用
定义的变量和方法一般都用大写</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span>:名称置换（相当于word中的替换，所以不能加；这样分号也就替换进去了）+宏方法定义</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> TRUE 1</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> PI 3.1415926</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> TWO_PI 2.0*PI</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> AND &&</span></div><div class="line"><span class="keyword">if</span>(time AND place) ==<span class="keyword">if</span>(time && place)</div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> OR ||</span></div><div class="line"><span class="keyword">if</span>(time OR place) ==<span class="keyword">if</span>(time || place)</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> IS_LEAP_YEAR year%4 ==0&&year%100 !=0\</span></div><div class="line">||year%<span class="number">400</span> ==<span class="number">0</span>      \是为了提示编译器还有一个后续</div><div class="line"><span class="keyword">if</span>(IS_LEAP_YEAR).....</div><div class="line"></div><div class="line"><span class="comment">//这样就不局限与当前year变量，而是普遍适用于任意年</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> IS_LEAP_YEAR(y) y%4 ==0&&y%100 !=0||y%400 ==0    </span></div><div class="line"><span class="keyword">if</span>(IS_LEAP_YEAR(y)).....</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> SQUARE(X) ((X)*(X))</span></div><div class="line"><span class="comment">//如果不加括号，会导致v+1*v+1，加了括号就是（V+1）*(V+1)</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> MakeFraction(x,y) ([[Fraction alloc]initWith: x over :y])</span></div><div class="line">myFract = MakeFraction(<span class="number">1</span>,<span class="number">3</span>);</div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></div><div class="line"><span class="comment">//用括号括起来，是为了避免运算错误</span></div><div class="line"><span class="comment">//1.MAX(x+1,y)*100  2.MAX(x&y,z)</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> IS_LOWER_CASE(x) (((x)&gt;('a'))&&(x)&lt;('z'))<span class="comment">//返回真值</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> TO_UPPER(x) (IS_LOWER_CASE(x)? ((x)-'a'+'A'):(x))<span class="comment">//返回字母</span></span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">define</span> IPAD 1</span></div><div class="line"></div><div class="line"><span class="preprocessor">#ifdef IPAD</span></div><div class="line"><span class="preprocessor">#   <span class="keyword">define</span> IMAGE @"ipad.jpg"<span class="comment">//别忘了空格</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">elif</span> IPHONE<span class="comment">//#else</span></span></div><div class="line"><span class="preprocessor">#   <span class="keyword">define</span> IMAGE @"iphone.jpg"<span class="comment">//别忘了空格</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line">编译过程中，可以通过 -D IPAD 来声明IPAD,从而是所有出现<span class="preprocessor">#ifdef IPAD的地方都通过</span></div><div class="line">Xcode在Buildsetting中设定 IPAD DEBUG</div><div class="line">gcc -framework-Foundation -D IPAD main.m -</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#if defined(DEBUG)</span></div><div class="line">NSLog(@<span class="string">"usename = %s,userid = %i"</span>,Username,UserId);</div><div class="line"><span class="preprocessor">#elif......</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"><span class="comment">//功能等价于</span></div><div class="line"><span class="preprocessor">#ifdef DEBUG</span></div><div class="line">NSLog(@<span class="string">"usename = %s,userid = %i"</span>,Username,UserId);</div><div class="line"><span class="preprocessor">#elif......</span></div><div class="line"><span class="preprocessor">#endif</span></div><div class="line"></div><div class="line"><span class="comment">//要保证DEBUG不仅仅被定义而且值非零才能继续进行下一步</span></div><div class="line"><span class="preprocessor">#if defined(DEBUG)&&DEBUG</span></div><div class="line"><span class="preprocessor">#define.....</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//消除定义</span></div><div class="line"><span class="preprocessor">#<span class="keyword">undef</span> IPAD</span></div><div class="line">之后的<span class="preprocessor">#ifdef IPAD和#<span class="keyword">if</span> defined(IPAD)两句话的值都是false</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>本文举例讲解了objective-c语言的基本语法
]]>
    
    </summary>
    
      <category term="objective-c" scheme="www.xiuyuliang.com/tags/objective-c/"/>
    
      <category term="C语言" scheme="www.xiuyuliang.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《objective-c程序设计》笔记[C语言相关篇]]]></title>
    <link href="www.xiuyuliang.com/2014/10/31/%E3%80%8Aobjective-c%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3%E7%AF%87/"/>
    <id>www.xiuyuliang.com/2014/10/31/《objective-c程序设计》笔记——C语言相关篇/</id>
    <published>2014-10-30T17:21:26.000Z</published>
    <updated>2014-11-04T08:30:20.000Z</updated>
    <content type="html"><![CDATA[<p>本文举例讲解了使用objective-c语言时，一些与C语言类似的特征。
<a id="more"></a></p>
<h4 id="数组的使用">数组的使用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> letters[<span class="number">5</span>] = {<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>};</div><div class="line"><span class="comment">//如果将[]中的数字隐去，则按照{}中元素的具体数目进行数组分配</span></div><div class="line"><span class="keyword">char</span> letters[] = {<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>};</div><div class="line"><span class="keyword">int</span> numbers[<span class="number">300</span>] = {[<span class="number">9</span>]=<span class="number">1</span>,[<span class="number">3</span>]=<span class="number">7</span>,[<span class="number">1</span>]=<span class="number">29</span>};<span class="comment">//任意指定，顺序可以打乱</span></div><div class="line"><span class="comment">//如果这里[]中的数字隐去，则默认按照最大的下标来分配数组元素数目，即numbers只有10个元素</span></div><div class="line"><span class="keyword">int</span> numbers[] = {[<span class="number">9</span>]=<span class="number">1</span>,[<span class="number">3</span>]=<span class="number">7</span>,[<span class="number">1</span>]=<span class="number">29</span>};<span class="comment">//任意指定，顺序可以打乱</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> word[] = {<span class="string">'H'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'\0'</span>};</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%s"</span>,word);</div><div class="line"><span class="comment">//输出的是“Hello”，因为NSLog会持续显示字符，直到遇到空字符</span></div></pre></td></tr></table></figure>

<p>将函数声明写在文件的开头是一个好习惯，即使调用的函数在前面已经定义，也要尽量把该函数在文件头进行声明一下，这样才能保证编译的正确性。</p>
<h4 id="块（block）">块（Block）</h4><p>块定义在函数或者方法的内部，相当于一个简单的内嵌函数，它可以访问块之外函数之内的任意变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(void)(^printmessage)(void)=</div><div class="line">^(void)//括号里面的是传入的参数类型</div><div class="line">{</div><div class="line">NSLog(@<span class="string">"Hello"</span>);</div><div class="line">};//不要忘记这个分号</div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line">printmessage();//调用方式不变</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import<span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line"><span class="keyword">@autoreleasepool</span></div><div class="line">{</div><div class="line"></div><div class="line"><span class="keyword">int</span> foo = <span class="number">10</span>;<span class="comment">//输出结果为10，说明块方法在定义的时候就已经捆绑了变量的值</span></div><div class="line">__block <span class="keyword">int</span> foo = <span class="number">10</span>;<span class="comment">//输出结果为15，说明块方法在运行的时候才捆绑变量的值</span></div><div class="line"><span class="keyword">void</span>(^printFoo)(<span class="keyword">void</span>)=</div><div class="line">^(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"foo = %i"</span>,foo);</div><div class="line">};</div><div class="line"></div><div class="line">foo = <span class="number">15</span>;</div><div class="line">printFoo();</div><div class="line">}</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import<span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line"><span class="keyword">@autoreleasepool</span></div><div class="line">{</div><div class="line"></div><div class="line">__block <span class="keyword">int</span> foo = <span class="number">10</span>;<span class="comment">//只有定义成块变量，foo才可以在块中更改值</span></div><div class="line"></div><div class="line"><span class="keyword">void</span>(^printFoo)(<span class="keyword">void</span>)=</div><div class="line">^(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"foo = %i"</span>,foo);</div><div class="line">foo = <span class="number">20</span>;</div><div class="line">};</div><div class="line"></div><div class="line">foo = <span class="number">15</span>;</div><div class="line">printFoo();<span class="comment">//输出15</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"foo = %i"</span>,foo);<span class="comment">//输出20</span></div><div class="line">}</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="c语言的语法补充">C语言的语法补充</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  main.c</span></div><div class="line"><span class="comment">//  helloword</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by 修宇亮 on 14-7-16.</span></div><div class="line"><span class="comment">//  Copyright (c) 2014年 修宇亮. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> student{</div><div class="line"></div><div class="line"><span class="keyword">int</span> age;</div><div class="line"><span class="keyword">int</span> grade;</div><div class="line"><span class="keyword">char</span> *name;</div><div class="line"></div><div class="line">};</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> SIZE_OF_ARRAY(a) sizeof(a)/sizeof(a[0])</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> HELLO(name) void name##girl(){ \</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"hello girl"</span>); \</div><div class="line">}<span class="comment">// \起到续行的作用</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> MYFUNC(name) void name##INIT()</span></div><div class="line"></div><div class="line"></div><div class="line">MYFUNC(xyl);</div><div class="line">HELLO(xyl);</div><div class="line"></div><div class="line"><span class="keyword">void</span> xylINIT(){<span class="built_in">printf</span>(<span class="string">"xyl is so cool!"</span>);}</div></pre></td></tr></table></figure>


<h4 id="一个验证##的实例">一个验证##的实例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import&lt;Foundation/Foundation.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> INITNAME() {\</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"Hello xyl1\n"</span>);\</div><div class="line">}</div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> HELLONAME(name) name##hello()<span class="comment">//这里不要写上void，会无法连接到xylhello()</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> xylhello(){</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Hello xyl2\n"</span>);</div><div class="line">}</div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line">INITNAME();</div><div class="line">HELLONAME(xyl);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">typedef <span class="keyword">int</span>  long_byte_four;<span class="comment">//给数据类型重新命名类型名</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> a = <span class="number">12</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">34</span>;</div><div class="line"><span class="keyword">int</span> *p1 = &a;</div><div class="line"><span class="keyword">int</span> *p2 = &b;</div><div class="line"></div><div class="line"><span class="keyword">void</span> swap01(<span class="keyword">int</span>,<span class="keyword">int</span>);</div><div class="line"><span class="keyword">void</span> swap02(<span class="keyword">int</span> *,<span class="keyword">int</span> *);</div><div class="line"><span class="keyword">void</span> swap03(<span class="keyword">int</span> **,<span class="keyword">int</span> **);</div><div class="line"><span class="keyword">void</span> swap04(<span class="keyword">int</span> *,<span class="keyword">int</span> *);</div><div class="line"><span class="keyword">void</span> testmalloc();</div><div class="line"><span class="keyword">void</span> testcalloc();</div><div class="line"><span class="keyword">void</span> testrealloc(<span class="keyword">int</span> *);</div><div class="line"><span class="keyword">void</span> testvoid();</div><div class="line"><span class="keyword">void</span> test_type_rename();</div><div class="line"><span class="keyword">void</span> test_byte();</div><div class="line"><span class="keyword">void</span> test_pointer();</div><div class="line"><span class="keyword">void</span> test_pointer_func();</div><div class="line"><span class="keyword">void</span> test_pointer_string();</div><div class="line"><span class="keyword">void</span> test_struct();</div><div class="line"><span class="keyword">void</span> common_swap();</div><div class="line"><span class="keyword">void</span> hong();</div><div class="line"><span class="keyword">void</span> swap(<span class="keyword">void</span> *,<span class="keyword">void</span> *,<span class="keyword">int</span> );</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, const <span class="keyword">char</span> * argv[])</div><div class="line">{</div><div class="line"></div><div class="line">test_byte();<span class="comment">//测试每一种数据类型的字节数</span></div><div class="line">test_type_rename();<span class="comment">//测试数据类型重新命名类型名</span></div><div class="line">test_pointer();<span class="comment">//测试指针的用途</span></div><div class="line">test_pointer_func();<span class="comment">//指针函数和函数指针</span></div><div class="line">test_pointer_string();<span class="comment">//字符串数组和指针字符串</span></div><div class="line">test_struct();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//四种交换算法（原数，地址，指针）</span></div><div class="line">swap01(a, b);</div><div class="line">swap02(&a, &b);</div><div class="line">swap03(&p1, &p2);</div><div class="line">swap04(p1, p2);</div><div class="line"></div><div class="line">testmalloc();<span class="comment">//malloc分配单块内存空间函数</span></div><div class="line">testcalloc();<span class="comment">///calloc连续分配内存空间函数</span></div><div class="line">testrealloc(p2);<span class="comment">//realloc重新定义内存分配空间的函数</span></div><div class="line"></div><div class="line">common_swap();</div><div class="line">hong();</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//可以被普遍使用的泛型swap</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> swap(<span class="keyword">void</span> *p1,<span class="keyword">void</span> *p2,<span class="keyword">int</span> <span class="keyword">size</span>){</div><div class="line"></div><div class="line"><span class="keyword">char</span> *charat1 = (<span class="keyword">char</span> *)p1;</div><div class="line"><span class="keyword">char</span> *charat2 = (<span class="keyword">char</span> *)p2;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">size</span>;i++){</div><div class="line"></div><div class="line"><span class="keyword">int</span> temp;</div><div class="line">temp = *(charat1+i);</div><div class="line">*(charat1+i) = *(charat2+i);</div><div class="line">*(charat2+i) = temp;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//void型变量的通用特性</span></div><div class="line"><span class="keyword">void</span> testvoid(){</div><div class="line"></div><div class="line"><span class="keyword">int</span> *t1 = <span class="keyword">NULL</span>;</div><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">t1 = &a;</div><div class="line"><span class="keyword">void</span> *v1 = <span class="keyword">NULL</span>;</div><div class="line">v1 = t1;</div><div class="line"></div><div class="line"><span class="keyword">long</span> *t2 = <span class="keyword">NULL</span>;</div><div class="line"><span class="keyword">long</span> b = <span class="number">78687698679867</span>;</div><div class="line">t2 = &b;</div><div class="line"><span class="keyword">void</span> *v2 = <span class="keyword">NULL</span>;</div><div class="line">v2 = t2;</div><div class="line"></div><div class="line">printf(<span class="string">"v1 = %d\n"</span>,*(<span class="keyword">int</span> *)v1);</div><div class="line">printf(<span class="string">"v2 = %ld\n"</span>,*(<span class="keyword">long</span> *)v2);</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="malloc,-calloc,realloc之间的区别">malloc, calloc,realloc之间的区别</h4><p>void<em> realloc(void</em> ptr, unsigned newsize);
void<em> malloc(unsigned size);
void</em> calloc(size_t nelem, size_t elsize);
都在stdlib.h函数库内</p>
<p>它们的返回值都是请求系统分配的地址,如果请求失败就返回NULL</p>
<p>malloc用于申请一段新的地址,参数size为需要内存空间的长度,如:
char<em> p;
p=(char</em>)malloc(20);</p>
<p>calloc与malloc相似,参数elsize 为申请地址的单位元素长度,nelem为元素个数,如:
char<em> p;
p=(char</em>)calloc(20, sizeof(char));<br>这个例子与上一个效果相同</p>
<p>realloc是给一个已经分配了地址的指针重新分配空间,参数ptr为原有的空间地址,newsize是重新申请的地址长度 </p>
<p>如:
char<em> p;
p=(char</em>)malloc(sizeof(char)<em>20);
p=(char</em>)realloc(p,sizeof(char)*40);
注意，这里的空间长度都是以字节为单位。</p>
<p>C语言的标准内存分配函数：malloc，calloc，realloc等。
malloc与calloc的区别为1块与n块的区别：
malloc调用形式为(类型<em>)malloc(size)：在内存的动态存储区中分配一块长度为“size”字节的连续区域，返回该区域的首地址。
calloc调用形式为(类型</em>)calloc(n，size)：在内存的动态存储区中分配n块长度为“size”字节的连续区域， 每一位都初始化为零，返回首地址。
realloc调用形式为(类型<em>)realloc(</em>ptr，size)：将ptr内存大小增大到size。</p>
<p>free的调用形式为free(void*ptr)：释放ptr所指向的一块内存空间。
C++中为new/delete函数。 </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//malloc分配单块内存空间函数</span></div><div class="line"><span class="keyword">void</span> testmalloc(){</div><div class="line"></div><div class="line"><span class="comment">//对p的单帧并没有清零，数值为随机数</span></div><div class="line"><span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="keyword">if</span>(p != NULL){</div><div class="line">*p = <span class="number">1234</span>;</div><div class="line"></div><div class="line">}<span class="keyword">else</span>{</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"*p = %d\n"</span>,*p);</div><div class="line"><span class="built_in">free</span>(p);</div><div class="line">p = NULL;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//calloc连续分配内存空间函数</span></div><div class="line"><span class="keyword">void</span> testcalloc(){</div><div class="line"></div><div class="line"><span class="comment">//对p的每一帧都实现清零</span></div><div class="line"><span class="keyword">int</span> *p = <span class="built_in">calloc</span>(<span class="number">5</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="keyword">if</span>(p !=NULL){</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</div><div class="line">*(p+i) = i+<span class="number">2</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"*p = %d\n"</span>,*(p+i));</div><div class="line">}</div><div class="line">}<span class="keyword">else</span>{</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line">testrealloc(p);</div><div class="line">p = NULL;</div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//realloc重新定义内存分配空间的函数</span></div><div class="line"><span class="keyword">void</span> testrealloc( <span class="keyword">int</span> *p2){</div><div class="line"></div><div class="line"><span class="keyword">int</span> *re_p = realloc(p2, <span class="number">10</span>);</div><div class="line"><span class="keyword">if</span>(re_p !=NULL){</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;<span class="number">10</span>;i++){</div><div class="line">*(re_p+i) = i+<span class="number">2</span>;</div><div class="line">}</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++){</div><div class="line"><span class="built_in">printf</span>(<span class="string">"*re_p = %d\n"</span>,*(re_p+i));</div><div class="line">}</div><div class="line">}<span class="keyword">else</span>{</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">}</div><div class="line"><span class="built_in">free</span>(re_p);</div><div class="line">re_p = NULL;</div><div class="line">p2 = NULL;</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> test_type_rename(){</div><div class="line">long_byte_four a1 = <span class="number">123</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a1 == %d\n"</span>,a1);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> add(<span class="keyword">int</span> a,<span class="keyword">int</span> b){</div><div class="line"><span class="keyword">return</span> a+b;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> multiple(<span class="keyword">int</span> (*func)(<span class="keyword">int</span>,<span class="keyword">int</span>),<span class="keyword">int</span> n1,<span class="keyword">int</span> n2){</div><div class="line"><span class="keyword">return</span> func(n1,n2)*n1;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试通用性交换算法</span></div><div class="line"><span class="keyword">void</span> common_swap(){</div><div class="line"></div><div class="line"><span class="keyword">int</span> a = <span class="number">123</span>;</div><div class="line"><span class="keyword">int</span> b = <span class="number">456</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> ch1[] = <span class="string">"xiuyuliang"</span>;</div><div class="line"><span class="keyword">char</span> ch2[] = <span class="string">"wangruihah"</span>;</div><div class="line"></div><div class="line"></div><div class="line">swap(&a,&b,<span class="keyword">sizeof</span>(a));</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line"></div><div class="line">swap(ch1, ch2, <span class="keyword">sizeof</span>(ch1));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch1 = %s\n"</span>,ch1);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch2 = %s\n"</span>,ch2);</div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> swap01(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2){</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"最原始的纯数据交换(a,b)\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line"><span class="keyword">int</span> temp;</div><div class="line">temp = t1;</div><div class="line">t1 = t2;</div><div class="line">t2 = temp;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> swap02(<span class="keyword">int</span> *t1,<span class="keyword">int</span> *t2){</div><div class="line"></div><div class="line"><span class="comment">//swap02(&a, &b);</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"仅仅交换副本指针的地址(&t1,&t2)\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line"><span class="keyword">int</span> *temp = NULL;</div><div class="line">temp = t1;</div><div class="line">t1 = t2;</div><div class="line">t2 = temp;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"t1 = %d\n"</span>,*t1);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"t2 = %d\n"</span>,*t2);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> swap03(<span class="keyword">int</span> **t1,<span class="keyword">int</span> **t2){</div><div class="line"></div><div class="line"><span class="comment">// swap03(&p1, &p2);</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"真正交换了原始指针(p1,p2)\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line"><span class="keyword">int</span> *temp = NULL;</div><div class="line">temp = *t1;</div><div class="line">*t1 = *t2;</div><div class="line">*t2 = temp;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"t1 = %d\n"</span>,**t1);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"t2 = %d\n"</span>,**t2);</div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> swap04(<span class="keyword">int</span> *t1,<span class="keyword">int</span> *t2){</div><div class="line"></div><div class="line"><span class="comment">//swap04(p1, p2);</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"真正交换了原值(a,b)\n"</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line"><span class="keyword">int</span> temp ;</div><div class="line">temp = *t1;</div><div class="line">*t1 = *t2;</div><div class="line">*t2 = temp;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>,b);</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> test_byte(){</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"char_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"int_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"long_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"short_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"double_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"long double_byte === %ld\n"</span> ,<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>));</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试指针的用途</span></div><div class="line"><span class="keyword">void</span> test_pointer(){</div><div class="line"></div><div class="line"><span class="keyword">int</span> a = <span class="number">123</span>;</div><div class="line"><span class="keyword">int</span> *b = &a;</div><div class="line"><span class="keyword">int</span> **c = &b;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a);<span class="comment">//a的值</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"&a = %p\n"</span>,&a);<span class="comment">//a的地址</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"b = %p\n"</span>,b);<span class="comment">//b存的a的地址</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"&b = %p\n"</span>,&b);<span class="comment">//b的地址</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"*b = %d\n"</span>,*b);<span class="comment">//b存的地址解码为a的值</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"c = %p\n"</span>,c);<span class="comment">//c存的b的地址</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"*c = %p\n"</span>,*c);<span class="comment">//c存的b的地址解码为b的值，即a的地址</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"**c = %d\n"</span>,**c);<span class="comment">//c解码两次，第一次解码为b的值，即a的地址，第二次解码为a的值，为123</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"&c = %p\n"</span>,&c);<span class="comment">//c的地址</span></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//指针函数和函数指针</span></div><div class="line"><span class="comment">//指针函数和函数指针的主要用途是作为参数传入函数或者方法</span></div><div class="line"><span class="keyword">void</span> test_pointer_func(){</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> add(<span class="keyword">int</span> ,<span class="keyword">int</span>);</div><div class="line"><span class="keyword">int</span> (*pfunc)(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</div><div class="line">pfunc = add;</div><div class="line"><span class="keyword">int</span> result = pfunc(<span class="number">13</span>,<span class="number">12</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"a+b ==  %d\n"</span>,result);</div><div class="line"></div><div class="line"><span class="keyword">int</span> multiple(<span class="keyword">int</span> (*func)(<span class="keyword">int</span>,<span class="keyword">int</span>),<span class="keyword">int</span> n1,<span class="keyword">int</span> n2);</div><div class="line"><span class="keyword">int</span> result2 = multiple(add, <span class="number">5</span>, <span class="number">3</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(a+b)*a = %d\n"</span>, result2);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//字符串数组和指针字符串</span></div><div class="line"><span class="keyword">void</span> test_pointer_string(){</div><div class="line"></div><div class="line"><span class="keyword">char</span> ch1[] = <span class="string">"success"</span>;</div><div class="line"><span class="keyword">char</span> *ch2 = <span class="string">"success2"</span>;</div><div class="line"><span class="keyword">char</span> *ch3 = <span class="string">"success3"</span>;</div><div class="line"><span class="keyword">char</span> *ch2_copy = <span class="string">"success2"</span>;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch1 = %s\n"</span>,ch1);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch1的地址 = %p\n"</span>,ch1);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch2 = %s\n"</span>,ch2);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch2的地址 = %p\n"</span>,ch2);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch2_copy的地址 = %p\n"</span>,ch2_copy);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch3 = %s\n"</span>,ch3);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"ch3的地址 = %p\n"</span>,ch3);</div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试结构体输出</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> test_struct(){</div><div class="line"><span class="keyword">struct</span> student *s1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</div><div class="line"><span class="keyword">if</span>(s1 !=NULL){</div><div class="line"></div><div class="line">s1-&gt;age = <span class="number">23</span>;</div><div class="line">s1-&gt;grade = <span class="number">8</span>;</div><div class="line">s1-&gt;name = <span class="string">"xyl"</span>;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"s1.age = %d\n"</span>,s1-&gt;age);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"s1.grade = %d\n"</span>,s1-&gt;grade);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"s1.name = %s\n"</span>,s1-&gt;name);</div><div class="line"></div><div class="line">}<span class="keyword">else</span>{</div><div class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="built_in">free</span>(s1);</div><div class="line">s1 = NULL;</div><div class="line"></div><div class="line"></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//检测宏定义的输出</span></div><div class="line"><span class="keyword">void</span> hong(){</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> a[] = {<span class="number">1</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">9</span>,<span class="number">23</span>,<span class="number">89</span>};</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"array_size = %ld\n"</span>,SIZE_OF_ARRAY(a));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,__LINE__);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,__FILE__);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,__TIME__);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,__DATE__);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,__STDC__);</div><div class="line">xylINIT();</div><div class="line">xylgirl();</div><div class="line"></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="小细节语法点">小细节语法点</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x =<span class="number">123</span>;</div><div class="line"><span class="keyword">int</span> a[] = {[<span class="number">7</span>]=<span class="number">1</span>,[<span class="number">0</span>]=x+<span class="number">1</span>,[<span class="number">4</span>]=<span class="number">5</span>};<span class="comment">//针对性的设置数组中的特定数值，其余为0</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> ch1[<span class="number">80</span>] = <span class="string">"nihao woshi nidie"</span>;</div><div class="line"><span class="keyword">char</span> *ch2 = <span class="string">"nihao woshi nidei"</span>;</div><div class="line"><span class="comment">//这两个都可以运行顺利，但是意义不同，一个是表示一段内存区域的数值分配，另一个是引用一个指针指向一个字符数组</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//空语句的功能</span></div><div class="line"><span class="comment">//功能是将键盘输入的字符存储到test指针指向的内存空间</span></div><div class="line"><span class="keyword">while</span>((*test = getchar()) != <span class="string">''</span>)</div><div class="line">;<span class="comment">//空语句</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//goto语句，实际上是一种执行跳转语句，直接跳转到goto后面标签标注的语句</div><div class="line">//这是一种很不好的编程习惯，不利于他人对程序的理解</div><div class="line">goto out_of_data;</div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line">out_of_data: NSLog(@<span class="string">"out of data"</span>);</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">int</span> arraySum(<span class="type">int</span> <span class="type">array</span>[], <span class="type">int</span> n)</div><div class="line"><span class="type">int</span> *arrayEnd = <span class="type">array</span>+n;</div><div class="line">//这里面虽然写的是arrgy[]，但其实传入之后的<span class="type">array</span>其实是一个地址，而且是数组的首地址</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个例子说明这个问题</span></div><div class="line"><span class="preprocessor">#import<span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> arraySum(<span class="keyword">int</span> array[], <span class="keyword">int</span> n)</div><div class="line">{</div><div class="line"><span class="keyword">int</span> *pr,*arrayEnd;</div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">arrayEnd = array + n;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(pr=array;pr&lt;arrayEnd;pr++)</div><div class="line">{</div><div class="line">sum += *pr;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">return</span> sum;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</div><div class="line">{</div><div class="line"><span class="keyword">@autoreleasepool</span></div><div class="line">{</div><div class="line"><span class="keyword">int</span> value[<span class="number">10</span>] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>};</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The sum is %i"</span>,arraySum(value,<span class="number">10</span>));</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void NSLog(NSString *format,<span class="keyword">...</span>);//<span class="keyword">...</span>用途是声明参数有不定数目</div></pre></td></tr></table></figure>

<h4 id="块（block）">块（BLOCK）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> (^calculateTriangleNumber)(<span class="keyword">int</span>) =</div><div class="line">^(<span class="keyword">int</span> n)</div><div class="line">{	</div><div class="line"><span class="keyword">int</span> triangleNumber = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">{</div><div class="line">triangleNumber += i;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The triangleNumber of %i is %i"</span>,n,triangleNumber);</div><div class="line">};<span class="comment">//分号一定不要忘记，因为这是一个句子</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</div><div class="line">{</div><div class="line"><span class="keyword">@autoreleasepool</span></div><div class="line">{</div><div class="line">calculateTriangleNumber(<span class="number">10</span>);</div><div class="line">calculateTriangleNumber(<span class="number">20</span>);</div><div class="line">calculateTriangleNumber(<span class="number">50</span>);</div><div class="line">}</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="结构体的相互借用">结构体的相互借用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</div><div class="line">{</div><div class="line"></div><div class="line"><span class="keyword">@autoreleasepool</span>{</div><div class="line"></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGPoint</span></div><div class="line">{</div><div class="line"><span class="built_in">CGFloat</span> x;</div><div class="line"><span class="built_in">CGFloat</span> y;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CGPoint</span> <span class="built_in">CGPoint</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGSize</span>	</div><div class="line">{</div><div class="line"><span class="built_in">CGFloat</span> width;</div><div class="line"><span class="built_in">CGFloat</span> height;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CGSize</span> <span class="built_in">CGSize</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGRect</span></div><div class="line">{</div><div class="line"><span class="built_in">CGPoint</span> origin;</div><div class="line"><span class="built_in">CGSize</span>  size;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CGRect</span> <span class="built_in">CGRect</span>;</div><div class="line"><span class="built_in">CGRect</span>  rect1 ;</div><div class="line"><span class="built_in">CGPoint</span> startp;</div><div class="line"><span class="built_in">CGSize</span>  range;</div><div class="line"></div><div class="line">startp<span class="variable">.x</span> = <span class="number">100.0</span>;</div><div class="line">startp<span class="variable">.y</span> = <span class="number">200.0</span>;</div><div class="line"></div><div class="line">range<span class="variable">.width</span> = <span class="number">20.0</span>;</div><div class="line">range<span class="variable">.height</span> = <span class="number">40.0</span>;</div><div class="line"></div><div class="line">rect1<span class="variable">.origin</span> = startp;</div><div class="line">rect1<span class="variable">.size</span> = range;</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"The rectangle :\n"</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"width: %f"</span>,rect1<span class="variable">.size</span><span class="variable">.width</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"height: %f"</span>,rect1<span class="variable">.size</span><span class="variable">.height</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"origin: (%f,%f)"</span>,rect1<span class="variable">.origin</span><span class="variable">.x</span>,rect1<span class="variable">.origin</span><span class="variable">.y</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="结构体声明变量的方法">结构体声明变量的方法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//在结构体中声明多个变量</span></div><div class="line"><span class="keyword">struct</span> date</div><div class="line">{</div><div class="line"><span class="keyword">int</span> year;</div><div class="line"><span class="keyword">int</span> month;</div><div class="line"><span class="keyword">int</span> day;</div><div class="line">}today,tomorrow;</div><div class="line"></div><div class="line"><span class="comment">//直接在结构体中声明定义变量</span></div><div class="line"><span class="keyword">struct</span> date</div><div class="line">{</div><div class="line"><span class="keyword">int</span> year;</div><div class="line"><span class="keyword">int</span> month;</div><div class="line"><span class="keyword">int</span> day;</div><div class="line">}today = {<span class="number">2013</span>,<span class="number">2</span>,<span class="number">4</span>};</div><div class="line"></div><div class="line"><span class="keyword">struct</span> today = {<span class="number">2014</span>,<span class="number">1</span>,<span class="number">21</span>};</div><div class="line"><span class="comment">//直接的初始化方式</span></div><div class="line"><span class="keyword">struct</span> today = {.month = <span class="number">2</span>,.year = <span class="number">1</span>,.day = <span class="number">21</span>};</div><div class="line"><span class="comment">//可以打乱方式用.member = value赋值</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//定义100天</span></div><div class="line"><span class="keyword">struct</span> </div><div class="line">{</div><div class="line"><span class="keyword">int</span> year;</div><div class="line"><span class="keyword">int</span> month;</div><div class="line"><span class="keyword">int</span> day;</div><div class="line">}date[<span class="number">100</span>];</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>本文举例讲解了使用objective-c语言时，一些与C语言类似的特征。
]]>
    
    </summary>
    
      <category term="objective-c" scheme="www.xiuyuliang.com/tags/objective-c/"/>
    
      <category term="C语言" scheme="www.xiuyuliang.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="编程学习" scheme="www.xiuyuliang.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
